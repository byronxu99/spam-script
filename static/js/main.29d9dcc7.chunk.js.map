{"version":3,"sources":["features/Footer.tsx","features/MainPage.tsx","utils/messageTypes.ts","features/data/dataSlice.ts","features/message/messageSlice.ts","features/message/Form.tsx","features/NavBar.tsx","features/data/DataPage.tsx","utils/templating.ts","features/message/MessagePage.tsx","features/message/MessagePreview.tsx","features/message/PreviewTab.tsx","features/message/HelpTab.tsx","features/message/AttachmentsTab.tsx","App.tsx","features/sending/SendPage.tsx","app/store.ts","index.tsx"],"names":["Footer","className","href","target","rel","icon","faGithub","fixedWidth","transform","MainPage","props","isMIT","window","location","hostname","includes","role","aria-label","onClick","nextPage","MessageFormat","dataSlice","createSlice","name","initialState","reducers","setRawData","state","action","raw","payload","setParsedData","headers","rows","actions","loadData","input","dispatch","data","result","Papa","parse","skipEmptyLines","parsedData","slice","map","x","trim","row","selectRawData","selectParsedData","bodyFormat","MARKDOWN","attachments","messageSlice","setMessageFormat","setRawBody","setHeader","header","value","selectMessageTemplate","template","selectMessageFormat","selectRawBody","selectHeader","field","Form","useState","showExtra","setShowExtra","useDispatch","from","useSelector","to","cc","bcc","replyTo","sender","inReplyTo","subject","messageFormat","messageText","type","placeholder","onChange","e","event","preventDefault","HTML","PLAINTEXT","placeholderText","defaultProps","title","prevPage","showNext","showPrev","NavBar","faAngleLeft","faAngleRight","DataPage","inputStr","autoFocus","spellCheck","wrap","messageBodyPlaceholder","loadExample","DataTable","length","item","index","key","makeSpamObject","spamObj","forEach","makeMessageTemplater","headerTemplaters","makeFieldTemplater","references","messageId","date","bodyTemplater","spam","templatedMessage","errors","templater","push","renameError","message","output","unsanitizedHtml","marked","MARKED_OPTIONS","html","DOMPurify","sanitize","text","htmlToText","fromString","HTML_TO_TEXT_OPTIONS","PROCESSED","postprocess","Function","error","newError","Error","toString","Tab","smartLists","smartypants","xhtml","hideLinkHrefIfSameAsText","returnDomByDefault","tables","MessagePreview","headerStyle","emptyStyle","mandatory","fromClass","toClass","subjectClass","dangerouslySetInnerHTML","__html","PreviewTab","preview","useMemo","HelpTab","AttachmentsTab","UiState","defaultTab","PREVIEW","MessagePage","currentTab","setCurrentTab","faEnvelope","HELP","faQuestionCircle","ATTACHMENTS","faPaperclip","SendPage","canGoBack","spams","makeSpamObjectArray","messages","setMessages","useEffect","MessageSendCard","open","setOpen","faAngleDown","initialUiState","MAIN_PAGE","App","uiState","setUiState","beforeUnload","setBeforeUnload","setBeforeUnloadAndGotoDataPage","addEventListener","returnValue","DATA_PAGE","MESSAGE_PAGE","SEND_PAGE","store","configureStore","reducer","dataReducer","templateReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29d9dcc7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"container\">\r\n        <div className=\"level has-text-centered\">\r\n          <div className=\"level-item\">\r\n            <a\r\n              href=\"https://esp.mit.edu\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"has-text-grey-dark\"\r\n            >\r\n              MIT ESP Email Spam Script\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"level-item\">\r\n            <a\r\n              href=\"https://github.com/byronxu99/spam-script\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"has-text-grey-dark\"\r\n            >\r\n              <span className=\"icon\">\r\n                <FontAwesomeIcon\r\n                  icon={faGithub}\r\n                  fixedWidth\r\n                  transform=\"down-1\"\r\n                />\r\n              </span>{\" \"}\r\n              Open Source\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"level-item\">\r\n            <a\r\n              href=\"https://scripts.mit.edu\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"has-text-grey-dark\"\r\n            >\r\n              Powered by scripts.mit.edu\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Footer from \"./Footer\";\r\n\r\ntype MainPageProps = {\r\n  nextPage: () => void;\r\n};\r\n\r\nexport default function MainPage(props: MainPageProps) {\r\n  // whether we are viewing on scripts.mit.edu or 3rd party server\r\n  const isMIT = window.location.hostname.includes(\"mit.edu\");\r\n\r\n  return (\r\n    <>\r\n      <section className=\"hero is-fullheight\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            {/* main title */}\r\n            <div className=\"title is-1 has-text-centered\">\r\n              Welcome to the new spam script!\r\n            </div>\r\n\r\n            {/* the 3 steps */}\r\n            <div className=\"columns is-desktop py-5\">\r\n              <div className=\"column has-text-centered px-2\">\r\n                <div className=\"huge-icon\">\r\n                  <span role=\"img\" aria-label=\"icon\">\r\n                    📋\r\n                  </span>\r\n                </div>\r\n                <p className=\"title is-3 py-1\">Enter your data</p>\r\n                <p className=\"subtitle is-5 py-2 px-5\">\r\n                  Copy and paste tab-separated or comma-separated values from a\r\n                  spreadsheet.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"column has-text-centered px-2\">\r\n                <div className=\"huge-icon\">\r\n                  <span role=\"img\" aria-label=\"icon\">\r\n                    ✏️\r\n                  </span>\r\n                </div>\r\n                <p className=\"title is-3 py-1\">Write your message</p>\r\n                <p className=\"subtitle is-5 py-2 px-5\">\r\n                  Draft a Markdown, HTML, or plain-text email template. Now with\r\n                  live preview!\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"column has-text-centered px-2\">\r\n                <div className=\"huge-icon\">\r\n                  <span role=\"img\" aria-label=\"icon\">\r\n                    ✉️\r\n                  </span>\r\n                </div>\r\n                <p className=\"title is-3 py-1\">Send your spam</p>\r\n                <p className=\"subtitle is-5 py-2 px-5\">\r\n                  Not yet implemented :(\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* button */}\r\n            <div className=\"has-text-centered py-4\">\r\n              <button\r\n                onClick={props.nextPage}\r\n                className=\"button is-success is-large px-6\"\r\n              >\r\n                Get started\r\n              </button>\r\n            </div>\r\n\r\n            {/* link to old spam script */}\r\n            {isMIT && (\r\n              <div className=\"has-text-centered py-1\">\r\n                <a href=\"https://esp.scripts.mit.edu:444/esp-publicity/email/email-dictator/web/edit.cgi\">\r\n                  Looking for the old spam script? Click here.\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","// object representing an email message\r\nexport type Message = {\r\n  // headers\r\n  from?: string;\r\n  sender?: string;\r\n  to?: string;\r\n  cc?: string;\r\n  bcc?: string;\r\n  replyTo?: string;\r\n  inReplyTo?: string;\r\n  references?: string;\r\n  subject?: string;\r\n  messageId?: string;\r\n  date?: string;\r\n  headers?: CustomHeaders;\r\n\r\n  // body content, before and after processing\r\n  bodyFormat: MessageFormat;\r\n  raw?: string;\r\n  text?: string;\r\n  html?: string;\r\n\r\n  // attachments\r\n  attachments: Attachment[];\r\n\r\n  // errors\r\n  errors?: Error[];\r\n};\r\n\r\nexport enum MessageFormat {\r\n  MARKDOWN,\r\n  HTML,\r\n  PLAINTEXT,\r\n  PROCESSED,\r\n}\r\n\r\n// object representing each email attachment\r\nexport type Attachment = {\r\n  // attachement metadata\r\n  filename: string;\r\n  contentType?: string; // MIME type\r\n  contentDisposition?: \"inline\" | \"attachment\";\r\n  contentTransferEncoding?: string; // usually \"base64\"\r\n  cid?: string; // unique identifier for each inline image\r\n  headers?: CustomHeaders;\r\n\r\n  // attachment data\r\n  content: string;\r\n};\r\n\r\n// dictionary of additional custom headers\r\nexport type CustomHeaders = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport type StandardHeaders =\r\n  | \"from\"\r\n  | \"sender\"\r\n  | \"to\"\r\n  | \"cc\"\r\n  | \"bcc\"\r\n  | \"replyTo\"\r\n  | \"inReplyTo\"\r\n  | \"references\"\r\n  | \"subject\"\r\n  | \"messageId\"\r\n  | \"date\";\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../app/store\";\r\nimport Papa from \"papaparse\";\r\n\r\n// CSV data after parsing\r\nexport type ParsedData = {\r\n  headers: string[];\r\n  rows: string[][];\r\n};\r\n\r\n// what goes into the redux store\r\ninterface DataState {\r\n  raw?: string;\r\n  headers?: string[];\r\n  rows?: string[][];\r\n}\r\nconst initialState: DataState = {};\r\n\r\n// slice creation\r\nexport const dataSlice = createSlice({\r\n  name: \"data\",\r\n  initialState,\r\n  reducers: {\r\n    setRawData: (state: DataState, action: PayloadAction<string>) => {\r\n      state.raw = action.payload;\r\n    },\r\n    setParsedData: (state: DataState, action: PayloadAction<ParsedData>) => {\r\n      state.headers = action.payload.headers;\r\n      state.rows = action.payload.rows;\r\n    },\r\n  },\r\n});\r\n\r\nconst { setRawData, setParsedData } = dataSlice.actions;\r\nexport default dataSlice.reducer;\r\n\r\n// exported actions\r\nexport function loadData(input: string): AppThunk {\r\n  return (dispatch) => {\r\n    dispatch(setRawData(input));\r\n\r\n    // parse the data\r\n    const result = Papa.parse(input, {\r\n      skipEmptyLines: \"greedy\",\r\n    });\r\n    const parsedData = trimData({\r\n      headers: result.data[0] || [],\r\n      rows: result.data.slice(1),\r\n    } as ParsedData);\r\n\r\n    dispatch(setParsedData(parsedData));\r\n  };\r\n}\r\n\r\n// selectors\r\nexport function selectRawData(state: RootState): string {\r\n  return state.data.raw || \"\";\r\n}\r\n\r\nexport function selectParsedData(state: RootState): ParsedData {\r\n  return {\r\n    headers: state.data.headers || [],\r\n    rows: state.data.rows || [],\r\n  };\r\n}\r\n\r\n// trim whitespace from data\r\nfunction trimData(data: ParsedData): ParsedData {\r\n  return {\r\n    headers: data.headers.map((x) => x.trim()),\r\n    rows: data.rows.map((row) => row.map((x) => x.trim())),\r\n  };\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport {\r\n  Message,\r\n  MessageFormat,\r\n  StandardHeaders,\r\n} from \"../../utils/messageTypes\";\r\n\r\n// what goes into the redux store\r\nconst initialState: Message = {\r\n  bodyFormat: MessageFormat.MARKDOWN,\r\n  attachments: [],\r\n};\r\n\r\nexport const messageSlice = createSlice({\r\n  name: \"template\",\r\n  initialState,\r\n  reducers: {\r\n    setMessageFormat: (\r\n      state: Message,\r\n      action: PayloadAction<MessageFormat>\r\n    ) => {\r\n      state.bodyFormat = action.payload;\r\n    },\r\n    setRawBody: (state: Message, action: PayloadAction<string>) => {\r\n      state.raw = action.payload;\r\n    },\r\n    setHeader: (\r\n      state: Message,\r\n      action: PayloadAction<{ header: StandardHeaders; value: string }>\r\n    ) => {\r\n      state[action.payload.header] = action.payload.value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setMessageFormat, setRawBody, setHeader } = messageSlice.actions;\r\nexport default messageSlice.reducer;\r\n\r\n// selectors\r\nexport function selectMessageTemplate(state: RootState) {\r\n  return state.template;\r\n}\r\n\r\nexport function selectMessageFormat(state: RootState) {\r\n  return state.template.bodyFormat;\r\n}\r\n\r\nexport function selectRawBody(state: RootState) {\r\n  return state.template.raw;\r\n}\r\n\r\nexport function selectHeader(field: StandardHeaders) {\r\n  return function (state: RootState) {\r\n    return state.template[field];\r\n  };\r\n}\r\n\r\nexport function selectCustomHeader(field: string) {\r\n  return function (state: RootState) {\r\n    return state.template.headers ? state.template.headers[field] : undefined;\r\n  };\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { MessageFormat } from \"../../utils/messageTypes\";\r\nimport {\r\n  selectMessageFormat,\r\n  setMessageFormat,\r\n  selectRawBody,\r\n  setRawBody,\r\n  selectHeader,\r\n  setHeader,\r\n} from \"./messageSlice\";\r\n\r\nexport default function Form() {\r\n  const [showExtra, setShowExtra] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  // headers\r\n  const from = useSelector(selectHeader(\"from\"));\r\n  const to = useSelector(selectHeader(\"to\"));\r\n  const cc = useSelector(selectHeader(\"cc\"));\r\n  const bcc = useSelector(selectHeader(\"bcc\"));\r\n  const replyTo = useSelector(selectHeader(\"replyTo\"));\r\n  const sender = useSelector(selectHeader(\"sender\"));\r\n  const inReplyTo = useSelector(selectHeader(\"inReplyTo\"));\r\n  const subject = useSelector(selectHeader(\"subject\"));\r\n\r\n  // message body\r\n  const messageFormat = useSelector(selectMessageFormat);\r\n  const messageText = useSelector(selectRawBody);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">From</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={from || \"\"}\r\n            placeholder=\"Your Name <example@mit.edu>\"\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"from\", value: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"help\">Must be an @mit.edu address</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">To</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={to || \"\"}\r\n            placeholder={`\\${SPAM.email}`}\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"to\", value: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"help\">Main recipients of your message</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">Cc</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={cc || \"\"}\r\n            placeholder=\"test1@example.com, test2@example.com\"\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"cc\", value: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"help\">Additional recipients of your message</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* hide additional fields */}\r\n      {!showExtra && (\r\n        <div className=\"has-text-centered\">\r\n          <a\r\n            onClick={(event) => {\r\n              setShowExtra(true);\r\n              event.preventDefault();\r\n            }}\r\n          >\r\n            Show additional fields...\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      {/* show additional fields */}\r\n      {showExtra && (\r\n        <>\r\n          <div className=\"has-text-centered\">\r\n            <a\r\n              onClick={(event) => {\r\n                setShowExtra(false);\r\n                event.preventDefault();\r\n              }}\r\n            >\r\n              Hide additional fields...\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Bcc</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={bcc || \"\"}\r\n                placeholder=\"test3@example.com\"\r\n                onChange={(e) =>\r\n                  dispatch(setHeader({ header: \"bcc\", value: e.target.value }))\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                Additional hidden recipients of your message\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Reply-To</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={replyTo || \"\"}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    setHeader({ header: \"replyTo\", value: e.target.value })\r\n                  )\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                Optional email address that you want people to send replies to\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Sender</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={sender || \"\"}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    setHeader({ header: \"sender\", value: e.target.value })\r\n                  )\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                If From is not an @mit.edu address, set this to an @mit.edu\r\n                address to send on behalf of an external address\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">In-Reply-To</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={inReplyTo || \"\"}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    setHeader({ header: \"inReplyTo\", value: e.target.value })\r\n                  )\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                For replying to previous messages (leave blank if you don't know\r\n                what this is)\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* subject field */}\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">Subject</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={subject || \"\"}\r\n            placeholder={`Automated spam message for \\${SPAM.name}`}\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"subject\", value: e.target.value }))\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* message textbox */}\r\n      <div className=\"field\">\r\n        <label className=\"label\">Message</label>\r\n        {/* message type selector */}\r\n        <div className=\"tabs is-toggle is-small mb-3\">\r\n          <ul>\r\n            <li\r\n              className={\r\n                messageFormat === MessageFormat.MARKDOWN ? \"is-active\" : \"\"\r\n              }\r\n            >\r\n              <a\r\n                onClick={(e) => {\r\n                  dispatch(setMessageFormat(MessageFormat.MARKDOWN));\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                Markdown\r\n              </a>\r\n            </li>\r\n            <li\r\n              className={\r\n                messageFormat === MessageFormat.HTML ? \"is-active\" : \"\"\r\n              }\r\n            >\r\n              <a\r\n                onClick={(e) => {\r\n                  dispatch(setMessageFormat(MessageFormat.HTML));\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                HTML\r\n              </a>\r\n            </li>\r\n            <li\r\n              className={\r\n                messageFormat === MessageFormat.PLAINTEXT ? \"is-active\" : \"\"\r\n              }\r\n            >\r\n              <a\r\n                onClick={(e) => {\r\n                  dispatch(setMessageFormat(MessageFormat.PLAINTEXT));\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                Plain text\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <textarea\r\n          className=\"textarea\"\r\n          value={messageText || \"\"}\r\n          rows={20}\r\n          placeholder={placeholderText}\r\n          onChange={(e) => dispatch(setRawBody(e.target.value))}\r\n        ></textarea>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const placeholderText = `\r\nDear \\${SPAM.name},\r\n\r\nThis is a friendly reminder that your appointment is scheduled for **tomorrow** at \\${SPAM.time}.\r\n\r\nIf you have any questions, please visit [our website](https://example.com).\r\n\r\nSincerely,<br>\r\nYour Name\r\n`.trim();\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype NavBarProps = {\r\n  title: string;\r\n  nextPage?: () => void;\r\n  prevPage?: () => void;\r\n  showNext: boolean;\r\n  showPrev: boolean;\r\n};\r\n\r\nconst defaultProps = {\r\n  title: \"\",\r\n  nextPage: () => {\r\n    return false;\r\n  },\r\n  prevPage: () => {\r\n    return false;\r\n  },\r\n  showNext: false,\r\n  showPrev: false,\r\n};\r\n\r\nexport default function NavBar(props: NavBarProps = defaultProps) {\r\n  return (\r\n    <div>\r\n      <nav className=\"container pt-5\">\r\n        <div className=\"level is-mobile\">\r\n          {/* previous page button */}\r\n          <div className=\"level-left has-text-centered\">\r\n            <button\r\n              onClick={props.prevPage}\r\n              className={\r\n                \"button is-success \" + (props.showPrev ? \"\" : \"is-invisible\")\r\n              }\r\n            >\r\n              <span className=\"icon\">\r\n                <FontAwesomeIcon icon={faAngleLeft} transform=\"down-1\" />\r\n              </span>\r\n              &nbsp;Back\r\n            </button>\r\n          </div>\r\n\r\n          {/* main title */}\r\n          <div className=\"level-item\">\r\n            <div className=\"title is-3 py-1\">{props.title}</div>\r\n          </div>\r\n\r\n          {/* next page button */}\r\n          <div className=\"level-right has-text-centered\">\r\n            <button\r\n              onClick={props.nextPage}\r\n              className={\r\n                \"button is-success \" + (props.showNext ? \"\" : \"is-invisible\")\r\n              }\r\n            >\r\n              Next&nbsp;\r\n              <span className=\"icon\">\r\n                <FontAwesomeIcon icon={faAngleRight} transform=\"down-1\" />\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { loadData, selectRawData, selectParsedData } from \"./dataSlice\";\r\nimport { MessageFormat } from \"../../utils/messageTypes\";\r\nimport {\r\n  setMessageFormat,\r\n  setRawBody,\r\n  setHeader,\r\n} from \"../message/messageSlice\";\r\nimport { placeholderText as messageBodyPlaceholder } from \"../message/Form\";\r\nimport NavBar from \"../NavBar\";\r\n\r\ntype DataPageProps = {\r\n  nextPage: () => void;\r\n  prevPage: () => void;\r\n};\r\n\r\nconst placeholderText = `\r\nemail, name, time\r\naphacker@mit.edu, Alyssa P. Hacker, 9:00 AM\r\nbitdiddle@mit.edu, Ben Bitdiddle, 11:00 AM\r\npembroke@mit.edu, Edward S. Pembroke, 2:00 PM\r\n`.trim();\r\n\r\nexport default function DataPage(props: DataPageProps) {\r\n  const inputStr = useSelector(selectRawData);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      {/* nav bar */}\r\n      <NavBar\r\n        title=\"Enter your data\"\r\n        nextPage={props.nextPage}\r\n        prevPage={props.prevPage}\r\n        showNext={true}\r\n        showPrev={true}\r\n      />\r\n\r\n      <div>\r\n        <div className=\"container px-3 pb-3\">\r\n          {/* text entry box */}\r\n          <div className=\"field\">\r\n            <label className=\"label\">\r\n              Enter data as a tab- or comma-separated array. The first line\r\n              should be a header row with variable names.\r\n            </label>\r\n            <textarea\r\n              className=\"textarea\"\r\n              value={inputStr || \"\"}\r\n              placeholder={placeholderText}\r\n              onChange={(e) => dispatch(loadData(e.target.value))}\r\n              rows={20}\r\n              autoFocus={true}\r\n              spellCheck=\"false\"\r\n              wrap=\"off\"\r\n            />\r\n            {!inputStr && (\r\n              <p className=\"pt-1\">\r\n                ({/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n                <a\r\n                  onClick={(e) => {\r\n                    loadExample(dispatch);\r\n                    e.preventDefault();\r\n                  }}\r\n                >\r\n                  Click here to load sample data and message\r\n                </a>\r\n                )\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {/* data preview table */}\r\n          <DataTable />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// generate a html table displaying parsed data\r\nfunction DataTable() {\r\n  const { headers, rows } = useSelector(selectParsedData);\r\n  return (\r\n    <>\r\n      {/* return nothing if headers is empty */}\r\n      {!!headers?.length && (\r\n        <div className=\"pt-3 pb-3\">\r\n          <p className=\"label pt-3\">Preview</p>\r\n\r\n          <div className=\"table-container mb-2\">\r\n            <table className=\"table is-bordered is-hoverable\">\r\n              {/* header row */}\r\n              <thead className=\"has-background-light\">\r\n                <tr>\r\n                  {headers.map((item, index) => {\r\n                    return <th key={index}>{item}</th>;\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n\r\n              {/* data rows */}\r\n              <tbody>\r\n                {rows?.map((row, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      {row.map((item, index) => {\r\n                        return <td key={index}>{item}</td>;\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <p>Number of emails: {rows?.length || 0}</p>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// load sample data and message\r\n// type of dispatch should actually be Dispatch from react-redux\r\nfunction loadExample(dispatch: any) {\r\n  dispatch(loadData(placeholderText));\r\n  dispatch(setHeader({ header: \"from\", value: \"Your Name <example@mit.edu>\" }));\r\n  dispatch(setHeader({ header: \"to\", value: `\\${SPAM.email}` }));\r\n  dispatch(\r\n    setHeader({\r\n      header: \"subject\",\r\n      value: `Automated spam message for \\${SPAM.name}`,\r\n    })\r\n  );\r\n  dispatch(setMessageFormat(MessageFormat.MARKDOWN));\r\n  dispatch(setRawBody(messageBodyPlaceholder));\r\n}\r\n","import marked from \"marked\";\r\nimport DOMPurify from \"dompurify\";\r\nimport htmlToText from \"html-to-text\";\r\nimport { ParsedData } from \"../features/data/dataSlice\";\r\nimport { Message, MessageFormat, StandardHeaders } from \"./messageTypes\";\r\n\r\n// type definitions\r\ntype SpamDataObject = {\r\n  [key: string]: string | string[];\r\n};\r\ntype MessageTemplater = (spam: SpamDataObject) => Message;\r\ntype FieldTemplater = (spam: SpamDataObject) => string;\r\n\r\n// convert ParsedData format into a list of SpamDataObject\r\n// to be used with templating functions\r\nexport function makeSpamObjectArray(data: ParsedData): SpamDataObject[] {\r\n  return data.rows.map((row, index) => makeSpamObject(data, index));\r\n}\r\n\r\n// convert a single row of data into SpamDataObject\r\nexport function makeSpamObject(\r\n  data: ParsedData,\r\n  index: number\r\n): SpamDataObject {\r\n  const { headers, rows } = data;\r\n  const row = rows[index] || [];\r\n  const spamObj: SpamDataObject = {};\r\n\r\n  // data entries indexed by header name\r\n  headers.forEach((name, index) => {\r\n    if (name) {\r\n      spamObj[name] = row[index] || \"\";\r\n    }\r\n  });\r\n\r\n  // all data entries as an array\r\n  spamObj[\"ARGV\"] = row;\r\n\r\n  return spamObj;\r\n}\r\n\r\n// given a message template, create a function that takes in a\r\n// SpamDataObject and returns a templated, processed message\r\nexport function makeMessageTemplater(template: Message): MessageTemplater {\r\n  const headerTemplaters: Record<StandardHeaders, FieldTemplater | Error> = {\r\n    from: makeFieldTemplater(template.from),\r\n    sender: makeFieldTemplater(template.sender),\r\n    to: makeFieldTemplater(template.to),\r\n    cc: makeFieldTemplater(template.cc),\r\n    bcc: makeFieldTemplater(template.bcc),\r\n    replyTo: makeFieldTemplater(template.replyTo),\r\n    inReplyTo: makeFieldTemplater(template.inReplyTo),\r\n    references: makeFieldTemplater(template.references),\r\n    subject: makeFieldTemplater(template.subject),\r\n    messageId: makeFieldTemplater(template.messageId),\r\n    date: makeFieldTemplater(template.date),\r\n  };\r\n  const bodyTemplater = makeFieldTemplater(template.raw);\r\n\r\n  return function (spam) {\r\n    const templatedMessage: Message = {\r\n      bodyFormat: template.bodyFormat,\r\n      attachments: template.attachments,\r\n      errors: template.errors || [],\r\n    };\r\n\r\n    // templating the message headers\r\n    for (const key in headerTemplaters) {\r\n      const field = key as StandardHeaders;\r\n      const templater = headerTemplaters[field];\r\n      if (typeof templater === \"function\") {\r\n        try {\r\n          const result = templater(spam);\r\n          // skip blank headers\r\n          if (result) {\r\n            templatedMessage[field] = result;\r\n          }\r\n        } catch (e) {\r\n          // error occured while templating\r\n          templatedMessage.errors?.push(\r\n            renameError(e, `Error in field \"${key}\"`)\r\n          );\r\n        }\r\n      } else {\r\n        // error occured while creating templater function\r\n        templatedMessage.errors?.push(\r\n          renameError(templater, `Error in field \"${key}\"`)\r\n        );\r\n      }\r\n    }\r\n\r\n    // templating the raw message body\r\n    if (typeof bodyTemplater === \"function\") {\r\n      try {\r\n        templatedMessage.raw = bodyTemplater(spam);\r\n      } catch (e) {\r\n        // error occured while templating\r\n        templatedMessage.errors?.push(renameError(e, \"Error in message body\"));\r\n      }\r\n    } else {\r\n      // error occured while creating templater function\r\n      templatedMessage.errors?.push(\r\n        renameError(bodyTemplater, \"Error in message body\")\r\n      );\r\n    }\r\n\r\n    // copying over custom headers\r\n    if (template.headers) {\r\n      templatedMessage.headers = template.headers;\r\n    }\r\n\r\n    // convert from raw to processed message\r\n    return postprocess(templatedMessage);\r\n  };\r\n}\r\n\r\n// create a per-field templating function\r\nfunction makeFieldTemplater(field?: string): FieldTemplater | Error {\r\n  if (!field) {\r\n    return () => \"\";\r\n  }\r\n  try {\r\n    // eslint-disable-next-line no-new-func\r\n    return Function(\"SPAM\", `return \\`${field}\\``) as FieldTemplater;\r\n  } catch (e) {\r\n    // an error occured while creating the function\r\n    return e;\r\n  }\r\n}\r\n\r\n// rename an error to include a more helpful message\r\nfunction renameError(error: Error, name: string): Error {\r\n  const newError = Error(error.toString());\r\n  newError.name = name;\r\n  return newError;\r\n}\r\n\r\n// postprocess raw message body into html/text format\r\nfunction postprocess(message: Message): Message {\r\n  const output = { ...message };\r\n\r\n  // message is in Markdown format\r\n  if (message.raw && message.bodyFormat === MessageFormat.MARKDOWN) {\r\n    const unsanitizedHtml = marked(message.raw, MARKED_OPTIONS);\r\n    output.html = DOMPurify.sanitize(unsanitizedHtml);\r\n    output.text = htmlToText.fromString(output.html, HTML_TO_TEXT_OPTIONS);\r\n  }\r\n\r\n  // message is in raw HTML format\r\n  if (message.raw && message.bodyFormat === MessageFormat.HTML) {\r\n    output.html = DOMPurify.sanitize(message.raw);\r\n    output.text = htmlToText.fromString(output.html, HTML_TO_TEXT_OPTIONS);\r\n  }\r\n\r\n  // message is in plain text format\r\n  if (message.raw && message.bodyFormat === MessageFormat.PLAINTEXT) {\r\n    output.text = message.raw;\r\n  }\r\n\r\n  // missing raw message body\r\n  if (!message.raw) {\r\n    output.text = \"\";\r\n  }\r\n\r\n  output.bodyFormat = MessageFormat.PROCESSED;\r\n  return output;\r\n}\r\n\r\n// settings for libraries\r\nconst MARKED_OPTIONS = {\r\n  smartLists: true,\r\n  smartypants: true,\r\n  xhtml: true,\r\n};\r\n\r\nconst HTML_TO_TEXT_OPTIONS = {\r\n  hideLinkHrefIfSameAsText: true,\r\n  returnDomByDefault: false,\r\n  tables: true,\r\n};\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEnvelope,\r\n  faQuestionCircle,\r\n} from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faPaperclip } from \"@fortawesome/free-solid-svg-icons\";\r\nimport NavBar from \"../NavBar\";\r\nimport Form from \"./Form\";\r\nimport PreviewTab from \"./PreviewTab\";\r\nimport HelpTab from \"./HelpTab\";\r\nimport AttachmentsTab from \"./AttachmentsTab\";\r\n\r\ntype MessagePageProps = {\r\n  nextPage: () => void;\r\n  prevPage: () => void;\r\n};\r\n\r\n// selects which tab is active\r\nenum Tab {\r\n  PREVIEW,\r\n  HELP,\r\n  ATTACHMENTS,\r\n}\r\nconst defaultTab: Tab = Tab.PREVIEW;\r\n\r\nexport default function MessagePage(props: MessagePageProps) {\r\n  const [currentTab, setCurrentTab] = useState(defaultTab);\r\n\r\n  return (\r\n    <>\r\n      {/* nav bar */}\r\n      <NavBar\r\n        title=\"Write your message\"\r\n        nextPage={props.nextPage}\r\n        prevPage={props.prevPage}\r\n        showNext={true}\r\n        showPrev={true}\r\n      />\r\n\r\n      <div className=\"fill-height\">\r\n        <div className=\"container px-3 pb-3 fullheight-container\">\r\n          <div className=\"columns is-desktop is-variable is-4 my-0 fullheight-container\">\r\n            {/* left panel: form for message template */}\r\n            <div className=\"column\">\r\n              <div className=\"fullheight-column\">\r\n                <div className=\"scrollable\">\r\n                  <Form />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* right panel: preview etc */}\r\n            <div className=\"column fullheight-container\">\r\n              <div className=\"card fullheight-card\">\r\n                {/* navigation tabs */}\r\n                <nav className=\"card-footer\">\r\n                  <div className=\"card-footer-item tabs is-fullwidth pt-1\">\r\n                    <ul>\r\n                      <li\r\n                        className={\r\n                          currentTab === Tab.PREVIEW ? \"is-active\" : \"\"\r\n                        }\r\n                      >\r\n                        <a\r\n                          onClick={(e) => {\r\n                            setCurrentTab(Tab.PREVIEW);\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <span className=\"icon\">\r\n                            <FontAwesomeIcon icon={faEnvelope} fixedWidth />\r\n                          </span>\r\n                          Preview\r\n                        </a>\r\n                      </li>\r\n                      <li\r\n                        className={currentTab === Tab.HELP ? \"is-active\" : \"\"}\r\n                      >\r\n                        <a\r\n                          onClick={(e) => {\r\n                            setCurrentTab(Tab.HELP);\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <span className=\"icon\">\r\n                            <FontAwesomeIcon\r\n                              icon={faQuestionCircle}\r\n                              fixedWidth\r\n                            />\r\n                          </span>\r\n                          Help\r\n                        </a>\r\n                      </li>\r\n                      <li\r\n                        className={\r\n                          currentTab === Tab.ATTACHMENTS ? \"is-active\" : \"\"\r\n                        }\r\n                      >\r\n                        <a\r\n                          onClick={(e) => {\r\n                            setCurrentTab(Tab.ATTACHMENTS);\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <span className=\"icon\">\r\n                            <FontAwesomeIcon\r\n                              icon={faPaperclip}\r\n                              transform=\"shrink-1\"\r\n                              fixedWidth\r\n                            />\r\n                          </span>\r\n                          Attachments\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </nav>\r\n\r\n                {/* render the desired element */}\r\n                <div className=\"card-content pt-3 fill-height\">\r\n                  <div className=\"fullheight-column\">\r\n                    <div className=\"scrollable\">\r\n                      {currentTab === Tab.PREVIEW && <PreviewTab />}\r\n                      {currentTab === Tab.HELP && <HelpTab />}\r\n                      {currentTab === Tab.ATTACHMENTS && <AttachmentsTab />}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Message } from \"../../utils/messageTypes\";\r\n\r\n// renders an in-browser preview of an email message\r\nexport default function MessagePreview(props: { message: Message }) {\r\n  const headerStyle = \"has-text-weight-bold\";\r\n  const emptyStyle = \"has-text-grey-light\";\r\n  const mandatory = {\r\n    from: props.message.from || \"(empty)\",\r\n    fromClass: props.message.from ? \"\" : emptyStyle,\r\n    to: props.message.to || \"(empty)\",\r\n    toClass: props.message.to ? \"\" : emptyStyle,\r\n    subject: props.message.subject || \"(empty)\",\r\n    subjectClass: props.message.subject ? \"\" : emptyStyle,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* headers */}\r\n      <div className=\"add-paragraph-spacing\">\r\n        <p>\r\n          <span className={headerStyle}>From:</span>{\" \"}\r\n          <span className={mandatory.fromClass}>{mandatory.from}</span>\r\n        </p>\r\n\r\n        <p>\r\n          <span className={headerStyle}>To:</span>{\" \"}\r\n          <span className={mandatory.toClass}>{mandatory.to}</span>\r\n        </p>\r\n\r\n        {props.message.cc && (\r\n          <p>\r\n            <span className={headerStyle}>Cc:</span> {props.message.cc}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.bcc && (\r\n          <p>\r\n            <span className={headerStyle}>Bcc:</span> {props.message.bcc}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.replyTo && (\r\n          <p>\r\n            <span className={headerStyle}>Reply-To:</span>{\" \"}\r\n            {props.message.replyTo}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.sender && (\r\n          <p>\r\n            <span className={headerStyle}>Sender:</span> {props.message.sender}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.inReplyTo && (\r\n          <p>\r\n            <span className={headerStyle}>In-Reply-To:</span>{\" \"}\r\n            {props.message.inReplyTo}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.references && (\r\n          <p>\r\n            <span className={headerStyle}>References:</span>{\" \"}\r\n            {props.message.references}\r\n          </p>\r\n        )}\r\n\r\n        <p>\r\n          <span className={headerStyle}>Subject:</span>{\" \"}\r\n          <span className={mandatory.subjectClass}>{mandatory.subject}</span>\r\n        </p>\r\n\r\n        {props.message.messageId && (\r\n          <p>\r\n            <span className={headerStyle}>Message-ID:</span>{\" \"}\r\n            {props.message.messageId}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.date && (\r\n          <p>\r\n            <span className={headerStyle}>Date:</span> {props.message.date}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* body */}\r\n      <div className=\"pt-3 break-overflow\">\r\n        {/* HTML body, if it exists */}\r\n        {props.message.html && (\r\n          <div\r\n            className=\"content\"\r\n            dangerouslySetInnerHTML={{ __html: props.message.html }}\r\n          />\r\n        )}\r\n\r\n        {/* plain text body, if HTML does not exist */}\r\n        {!props.message.html && props.message.text && (\r\n          <pre className=\"wrap-text\">{props.message.text}</pre>\r\n        )}\r\n\r\n        {/* missing email body */}\r\n        {!props.message.html && !props.message.text && (\r\n          <p className={emptyStyle}>(message is blank)</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* errors */}\r\n      {props.message.errors && props.message.errors.length > 0 && (\r\n        <div className=\"pt-5\">\r\n          {props.message.errors.map((error, index) => {\r\n            return (\r\n              <div key={index} className=\"message is-danger\">\r\n                <div className=\"message-body\">\r\n                  {error.name && (\r\n                    <span className={headerStyle}>[{error.name}] </span>\r\n                  )}\r\n                  {error.message}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectMessageTemplate } from \"./messageSlice\";\r\nimport { selectParsedData } from \"../data/dataSlice\";\r\nimport { makeSpamObject, makeMessageTemplater } from \"../../utils/templating\";\r\nimport MessagePreview from \"./MessagePreview\";\r\n\r\nexport default function PreviewTab() {\r\n  const template = useSelector(selectMessageTemplate);\r\n  const data = useSelector(selectParsedData);\r\n\r\n  const templater = useMemo(() => makeMessageTemplater(template), [template]);\r\n  const spam = useMemo(() => makeSpamObject(data, 0), [data]);\r\n  const preview = templater(spam);\r\n\r\n  //const preview = template;\r\n\r\n  return <MessagePreview message={preview} />;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function HelpTab() {\r\n  return (\r\n    <div className=\"content\">\r\n      <h3>Inserting variables</h3>\r\n      <p>\r\n        In your data, each value in the header row defines a variable name. The\r\n        spam script generates one email for each subsequent row of data.\r\n      </p>\r\n      <p>\r\n        Variables are stored in the <code>SPAM</code> object, and substitutions\r\n        are done using <code>{`\\${}`}</code> syntax. You can insert a variable\r\n        named <code>xyz</code> into your email by writing{\" \"}\r\n        <code>{`\\${SPAM.xyz}`}</code> or by writing{\" \"}\r\n        <code>{`\\${SPAM[\"xyz\"]}`}</code>. The latter syntax is necessary if your\r\n        variable name contains special characters like spaces.\r\n      </p>\r\n      <p>\r\n        The message that you write is evaulated as a Javascript{\" \"}\r\n        <a\r\n          href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          template literal\r\n        </a>\r\n        . You can include arbitrary Javascript code inside the{\" \"}\r\n        <code>{`\\${}`}</code> expressions.\r\n      </p>\r\n      <p>\r\n        In addition, you can access non-named data entries by index via the\r\n        special value of <code>SPAM.ARGV</code>, an array that contains the\r\n        entire data row. This can be used to generate things like\r\n        variable-length tables inside your email.\r\n      </p>\r\n\r\n      <h3>Special characters</h3>\r\n      <ul>\r\n        <li>\r\n          To insert a literal backslash (<code>\\</code>), write <code>\\\\</code>.\r\n        </li>\r\n        <li>\r\n          To insert a literal backtick (<code>`</code>), write <code>\\`</code>.\r\n        </li>\r\n        <li>\r\n          To insert a literal <code>{`\\${`}</code>, escape the dollar sign like\r\n          this: <code>{`\\\\\\${}`}</code>.\r\n        </li>\r\n        <li>\r\n          To insert a special Unicode code point, use{\" \"}\r\n          <code>{`\\\\u{XXXXX}`}</code>.\r\n        </li>\r\n      </ul>\r\n\r\n      <h3>Markdown</h3>\r\n      <p>\r\n        If you are using Markdown mode, you can apply formatting to your message\r\n        with{\" \"}\r\n        <a\r\n          href=\"https://www.markdownguide.org/cheat-sheet/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Markdown syntax\r\n        </a>\r\n        . The table below shows a few commonly used elements.\r\n      </p>\r\n      <table className=\"table is-bordered is-hoverable fixed-table\">\r\n        <thead className=\"has-background-light\">\r\n          <tr>\r\n            <th>Markdown</th>\r\n            <th>Result</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <code># Heading 1</code>\r\n            </td>\r\n            <td className=\"title is-4 mx-0 my-0\">Heading 1</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>## Heading 2</code>\r\n            </td>\r\n            <td className=\"title is-5\">Heading 2</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>*Italic*</code>\r\n            </td>\r\n            <td>\r\n              <em>Italic</em>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>**Bold**</code>\r\n            </td>\r\n            <td className=\"has-text-weight-bold\">Bold</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>~~Strikethrough~~</code>\r\n            </td>\r\n            <td>\r\n              <s>Strikethrough</s>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>* List</code>\r\n            </td>\r\n            <td>\r\n              <ul className=\"mx-4 my-0\">\r\n                <li>List</li>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>\\`Code\\`</code>\r\n            </td>\r\n            <td>\r\n              <code>Code</code>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>[Link](https://example.com)</code>\r\n            </td>\r\n            <td>\r\n              <a\r\n                href=\"https://example.com\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Link\r\n              </a>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <p>\r\n        Because template literal evaluation occurs before Markdown parsing,\r\n        you'll need to escape backticks and other special characters that are\r\n        part of your Markdown. For example, writing{\" \"}\r\n        <code>{`\\\\\\`Code\\\\\\``}</code> will result in the Markdown expression{\" \"}\r\n        <code>{`\\`Code\\``}</code>.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AttachmentsTab() {\r\n  return (\r\n    <div className=\"has-text-centered vertical-center\">\r\n      <div className=\"pb-6\">\r\n        <div className=\"huge-icon\">\r\n          <span role=\"img\" aria-label=\"icon\">\r\n            🛠️\r\n          </span>\r\n        </div>\r\n        <p className=\"title has-text-grey-dark\">Not yet implemented</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport MainPage from \"./features/MainPage\";\r\nimport DataPage from \"./features/data/DataPage\";\r\nimport MessagePage from \"./features/message/MessagePage\";\r\nimport SendPage from \"./features/sending/SendPage\";\r\n\r\nenum UiState {\r\n  MAIN_PAGE,\r\n  DATA_PAGE,\r\n  MESSAGE_PAGE,\r\n  SEND_PAGE,\r\n}\r\nconst initialUiState: UiState = UiState.MAIN_PAGE;\r\n\r\n// the App itself is a simple router that returns the desired\r\n// component depending on an internal state\r\nexport default function App() {\r\n  // which component to show\r\n  const [uiState, setUiState] = useState(initialUiState);\r\n\r\n  // confirm page leave/refresh\r\n  const [beforeUnload, setBeforeUnload] = useState(false);\r\n  const setBeforeUnloadAndGotoDataPage = () => {\r\n    if (!beforeUnload) {\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload\r\n      window.addEventListener(\"beforeunload\", function (e) {\r\n        // Cancel the event\r\n        e.preventDefault(); // If you prevent default behavior in Mozilla Firefox prompt will always be shown\r\n        // Chrome requires returnValue to be set\r\n        e.returnValue = \"\";\r\n      });\r\n      setBeforeUnload(true);\r\n    }\r\n    setUiState(UiState.DATA_PAGE);\r\n  };\r\n\r\n  switch (uiState) {\r\n    case UiState.MAIN_PAGE:\r\n      return <MainPage nextPage={setBeforeUnloadAndGotoDataPage} />;\r\n    case UiState.DATA_PAGE:\r\n      return (\r\n        <DataPage\r\n          prevPage={() => setUiState(UiState.MAIN_PAGE)}\r\n          nextPage={() => setUiState(UiState.MESSAGE_PAGE)}\r\n        />\r\n      );\r\n    case UiState.MESSAGE_PAGE:\r\n      return (\r\n        <MessagePage\r\n          prevPage={() => setUiState(UiState.DATA_PAGE)}\r\n          nextPage={() => setUiState(UiState.SEND_PAGE)}\r\n        />\r\n      );\r\n    case UiState.SEND_PAGE:\r\n      return <SendPage prevPage={() => setUiState(UiState.MESSAGE_PAGE)} />;\r\n    default:\r\n      return <MainPage nextPage={setBeforeUnloadAndGotoDataPage} />;\r\n  }\r\n}\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEnvelope } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Message } from \"../../utils/messageTypes\";\r\nimport { selectMessageTemplate } from \"../message/messageSlice\";\r\nimport { selectParsedData } from \"../data/dataSlice\";\r\nimport {\r\n  makeSpamObjectArray,\r\n  makeMessageTemplater,\r\n} from \"../../utils/templating\";\r\nimport MessagePreview from \"../message/MessagePreview\";\r\nimport NavBar from \"../NavBar\";\r\n\r\ntype SendPageProps = {\r\n  prevPage: () => void;\r\n};\r\n\r\nexport default function SendPage(props: SendPageProps) {\r\n  // back button on navbar\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [canGoBack, setCanGoBack] = useState(true);\r\n\r\n  // data from redux store\r\n  const template = useSelector(selectMessageTemplate);\r\n  const data = useSelector(selectParsedData);\r\n\r\n  // convert data into spam objects and templating function\r\n  const templater = useMemo(() => makeMessageTemplater(template), [template]);\r\n  const spams = useMemo(() => makeSpamObjectArray(data), [data]);\r\n\r\n  // list of processed messages\r\n  const [messages, setMessages] = useState([] as Message[]);\r\n  useEffect(() => setMessages(spams.map(templater)), [templater, spams]);\r\n\r\n  return (\r\n    <>\r\n      {/* no messages */}\r\n      {messages.length === 0 && (\r\n        <div className=\"hero is-fullheight\">\r\n          <div className=\"hero-header\">\r\n            <NavBar\r\n              title=\"Send your spam\"\r\n              prevPage={props.prevPage}\r\n              showNext={false}\r\n              showPrev={canGoBack}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"hero-body\">\r\n            <div className=\"container has-text-centered pb-6\">\r\n              <div className=\"huge-icon\">\r\n                <span role=\"img\" aria-label=\"icon\">\r\n                  📭\r\n                </span>\r\n              </div>\r\n              <p className=\"title has-text-grey-dark\">No messages to send!</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* with messages */}\r\n      {messages.length > 0 && (\r\n        <div>\r\n          <NavBar\r\n            title=\"Send your spam\"\r\n            prevPage={props.prevPage}\r\n            showNext={false}\r\n            showPrev={canGoBack}\r\n          />\r\n\r\n          <div>\r\n            <div className=\"container px-3\">\r\n              <div className=\"has-text-centered pb-5\">\r\n                <h1 className=\"subtitle\">\r\n                  Message sending is not yet implemented, but you can preview\r\n                  your emails here.\r\n                </h1>\r\n              </div>\r\n\r\n              {messages.map((message, index) => {\r\n                return <MessageSendCard key={index} message={message} />;\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction MessageSendCard(props: { message: Message }) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-header-title\">\r\n          <span className=\"icon\">\r\n            <FontAwesomeIcon icon={faEnvelope} fixedWidth />\r\n          </span>\r\n          &nbsp; To: {props.message.to || \"(empty)\"}\r\n        </div>\r\n\r\n        <div className=\"card-header-icon\" onClick={() => setOpen(!open)}>\r\n          <span className=\"icon\">\r\n            <FontAwesomeIcon icon={faAngleDown} fixedWidth />\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      {open && (\r\n        <div className=\"card-content\">\r\n          <MessagePreview message={props.message} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport dataReducer from \"../features/data/dataSlice\";\r\nimport templateReducer from \"../features/message/messageSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    data: dataReducer, // the array of data\r\n    template: templateReducer, // the message template\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\n//import * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}