{"version":3,"sources":["utils/misc.ts","features/Footer.tsx","features/MainPage.tsx","utils/messageTypes.ts","features/data/dataSlice.ts","utils/templating.ts","features/message/messageSlice.ts","features/message/Form.tsx","features/NavBar.tsx","features/data/DataPage.tsx","features/message/MessagePage.tsx","features/message/MessagePreview.tsx","features/message/PreviewTab.tsx","features/message/HelpTab.tsx","features/message/AttachmentsTab.tsx","features/sending/sendingSlice.ts","App.tsx","features/sending/MessageSendCard.tsx","features/sending/SendPage.tsx","utils/api.ts","features/sending/sendingEpic.ts","store.ts","index.tsx"],"names":["isMIT","window","location","hostname","includes","isDevelopment","process","NODE_ENV","preventExit","e","preventDefault","returnValue","isExitConfirmationSet","setExitConfirmation","addEventListener","clearExitConfirmation","removeEventListener","Footer","className","href","target","rel","icon","faGithub","fixedWidth","transform","MainPage","props","role","aria-label","onClick","nextPage","MessageFormat","dataSlice","createSlice","name","initialState","reducers","setRawData","state","action","raw","payload","setParsedData","headers","rows","actions","loadData","input","dispatch","data","result","Papa","parse","skipEmptyLines","parsedData","slice","map","x","trim","row","selectRawData","selectParsedData","MARKED_OPTIONS","smartLists","smartypants","xhtml","HTML_TO_TEXT_OPTIONS","hideLinkHrefIfSameAsText","tables","RESERVED_KEYWORDS","makeSpamObject","index","spamObj","forEach","makeMessageTemplater","template","headerTemplaters","from","makeFieldTemplater","sender","to","cc","bcc","replyTo","inReplyTo","references","subject","messageId","date","bodyTemplater","attachmentNameTemplater","attachmentNames","spam","templatedMessage","host","bodyFormat","attachments","errors","key","field","templater","push","renameError","file","filename","replaceAll","cid","contentDisposition","split","find","Error","message","output","MARKDOWN","unsanitizedHtml","marked","html","DOMPurify","sanitize","text","htmlToText","fromString","HTML","PLAINTEXT","matchAll","match","PROCESSED","postprocess","Function","error","newError","toString","messageSlice","setHost","setMessageFormat","setRawBody","setHeader","header","value","setAttachmentNames","addAttachments","selectHost","selectMessageTemplate","selectMessageFormat","selectRawBody","selectAttachmentNames","selectAttachments","selectHeader","Form","useState","showExtra","setShowExtra","useDispatch","useSelector","messageFormat","messageText","type","placeholder","onChange","event","placeholderText","defaultProps","title","prevPage","showNext","showPrev","NavBar","faAngleLeft","faAngleRight","DataPage","inputStr","autoFocus","spellCheck","wrap","messageBodyPlaceholder","loadExample","DataTable","forbiddenHeaders","filter","length","item","h","Tab","MessagePreview","headerStyle","emptyStyle","mandatory","fromClass","toClass","subjectClass","contentType","content","concat","additionalErrors","dangerouslySetInnerHTML","__html","i","PreviewTab","preview","useMemo","HelpTab","alt","src","AttachmentsTab","isLoading","setIsLoading","fileToAttachment","Promise","resolve","reject","reader","FileReader","onloadend","contentTransferEncoding","replace","readAsDataURL","multiple","newFiles","files","all","then","results","faUpload","Set","size","SendStatus","defaultTab","PREVIEW","MessagePage","currentTab","setCurrentTab","faEnvelope","HELP","faQuestionCircle","ATTACHMENTS","faPaperclip","UiState","sendingSlice","setSendingState","setMessage","setStatus","status","SUCCESS","undefined","setError","ERROR","setShowPreview","showPreview","sendMessages","UNSENT","shouldSendMessage","QUEUED","cancelSending","SENDING","loadMessagesToSend","getState","sendObjects","makeSpamObjectArray","m","selectMessageHost","sending","selectSendStatuses","MessageSendCard","recipients","join","faSpinner","faCheck","faTimes","getIcon","iconStyle","getIconStyle","iconTooltip","getIconTooltip","iconSpin","pulse","faAngleDown","SendPage","sendStatuses","messageHost","numMessages","numSuccess","numUnsent","numError","isDoneSending","isInProgress","some","canGoBack","useEffect","onMouseDown","initialUiState","MAIN_PAGE","App","uiState","setUiState","DATA_PAGE","MESSAGE_PAGE","SEND_PAGE","apiSendMessage","ajax","url","method","body","withCredentials","pipe","ajaxResponse","response","apiSendMessageReal","isError","Math","random","of","delay","tap","console","log","apiSendMessageFake","epics","action$","state$","withLatestFrom","concatMap","selectMessage","errorMessage","apiHandleResponse","catchError","takeUntil","epicMiddleware","createEpicMiddleware","rootEpic","store$","dependencies","combineEpics","source","store","configureStore","reducer","dataReducer","templateReducer","sendingReducer","middleware","getDefaultMiddleware","prepend","run","createStoreWithEpicMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b81ff3e2.chunk.js","sourcesContent":["// whether we are running on scripts.mit.edu or 3rd party server\r\nexport const isMIT: boolean = window.location.hostname.includes(\"mit.edu\");\r\n\r\n// are we running in a dev environment?\r\nexport const isDevelopment: boolean =\r\n  process?.env?.NODE_ENV && process.env.NODE_ENV === \"development\";\r\n\r\n// confirm exiting of the page\r\n// https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload\r\nfunction preventExit(e: Event) {\r\n  e.preventDefault();\r\n  e.returnValue = false;\r\n}\r\nlet isExitConfirmationSet: boolean = false;\r\n\r\nexport function setExitConfirmation() {\r\n  if (!isExitConfirmationSet && !isDevelopment) {\r\n    window.addEventListener(\"beforeunload\", preventExit);\r\n    isExitConfirmationSet = true;\r\n  }\r\n}\r\n\r\nexport function clearExitConfirmation() {\r\n  if (isExitConfirmationSet) {\r\n    window.removeEventListener(\"beforeunload\", preventExit);\r\n    isExitConfirmationSet = false;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"container\">\r\n        <div className=\"level has-text-centered\">\r\n          <div className=\"level-item\">\r\n            <a\r\n              href=\"https://esp.mit.edu\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"has-text-grey-dark\"\r\n            >\r\n              MIT ESP Email Spam Script\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"level-item\">\r\n            <a\r\n              href=\"https://github.com/byronxu99/spam-script\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"has-text-grey-dark\"\r\n            >\r\n              <span className=\"icon\">\r\n                <FontAwesomeIcon\r\n                  icon={faGithub}\r\n                  fixedWidth\r\n                  transform=\"down-1\"\r\n                />\r\n              </span>{\" \"}\r\n              Open Source\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"level-item\">\r\n            <a\r\n              href=\"https://scripts.mit.edu\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"has-text-grey-dark\"\r\n            >\r\n              Powered by scripts.mit.edu\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport { isMIT } from \"../utils/misc\";\r\n\r\ntype MainPageProps = {\r\n  nextPage: () => void;\r\n};\r\n\r\nexport default function MainPage(props: MainPageProps) {\r\n  return (\r\n    <>\r\n      <section className=\"hero is-fullheight\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            {/* main title */}\r\n            <div className=\"title is-1 has-text-centered\">\r\n              Welcome to the new spam script!\r\n            </div>\r\n\r\n            {/* the 3 steps */}\r\n            <div className=\"columns is-desktop py-5\">\r\n              <div className=\"column has-text-centered px-2\">\r\n                <div className=\"huge-icon\">\r\n                  <span role=\"img\" aria-label=\"icon\">\r\n                    📋\r\n                  </span>\r\n                </div>\r\n                <p className=\"title is-3 py-1\">Enter your data</p>\r\n                <p className=\"subtitle is-5 py-2 px-5\">\r\n                  Copy and paste tab-separated or comma-separated values from a\r\n                  spreadsheet.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"column has-text-centered px-2\">\r\n                <div className=\"huge-icon\">\r\n                  <span role=\"img\" aria-label=\"icon\">\r\n                    ✏️\r\n                  </span>\r\n                </div>\r\n                <p className=\"title is-3 py-1\">Write your message</p>\r\n                <p className=\"subtitle is-5 py-2 px-5\">\r\n                  Draft a Markdown, HTML, or plain-text email template,\r\n                  featuring instant preview\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"column has-text-centered px-2\">\r\n                <div className=\"huge-icon\">\r\n                  <span role=\"img\" aria-label=\"icon\">\r\n                    ✉️\r\n                  </span>\r\n                </div>\r\n                <p className=\"title is-3 py-1\">Send your spam</p>\r\n                <p className=\"subtitle is-5 py-2 px-5\">\r\n                  Double-check all your messages and go! View live progress as\r\n                  each message sends.\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* button */}\r\n            <div className=\"has-text-centered py-4\">\r\n              <button\r\n                onClick={props.nextPage}\r\n                className=\"button is-success is-large px-6\"\r\n              >\r\n                Get started\r\n              </button>\r\n            </div>\r\n\r\n            {/* link to old spam script */}\r\n            {isMIT && (\r\n              <div className=\"has-text-centered py-1\">\r\n                <a href=\"https://esp.scripts.mit.edu:444/esp-publicity/email/email-dictator/web/edit.cgi\">\r\n                  Looking for the old spam script? Click here.\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","// object representing an email message\r\nexport type Message = {\r\n  // host\r\n  host?: string;\r\n\r\n  // headers\r\n  from?: string;\r\n  sender?: string;\r\n  to?: string;\r\n  cc?: string;\r\n  bcc?: string;\r\n  replyTo?: string;\r\n  inReplyTo?: string;\r\n  references?: string;\r\n  subject?: string;\r\n  messageId?: string;\r\n  date?: string;\r\n  headers?: CustomHeaders;\r\n\r\n  // body content, before and after processing\r\n  bodyFormat: MessageFormat;\r\n  raw?: string;\r\n  text?: string;\r\n  html?: string;\r\n\r\n  // attachments\r\n  attachmentNames?: string;\r\n  attachments: Attachment[];\r\n\r\n  // errors\r\n  errors?: Error[];\r\n};\r\n\r\nexport enum MessageFormat {\r\n  MARKDOWN,\r\n  HTML,\r\n  PLAINTEXT,\r\n  PROCESSED,\r\n}\r\n\r\n// object representing each email attachment\r\nexport type Attachment = {\r\n  // attachement metadata\r\n  filename: string;\r\n  contentType?: string; // MIME type\r\n  contentDisposition?: \"inline\" | \"attachment\";\r\n  contentTransferEncoding?: string; // usually \"base64\"\r\n  cid?: string; // unique identifier for each inline image\r\n  headers?: CustomHeaders;\r\n\r\n  // attachment data\r\n  content: string;\r\n};\r\n\r\n// dictionary of additional custom headers\r\nexport type CustomHeaders = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport type StandardHeaders =\r\n  | \"from\"\r\n  | \"sender\"\r\n  | \"to\"\r\n  | \"cc\"\r\n  | \"bcc\"\r\n  | \"replyTo\"\r\n  | \"inReplyTo\"\r\n  | \"references\"\r\n  | \"subject\"\r\n  | \"messageId\"\r\n  | \"date\";\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../store\";\r\nimport Papa from \"papaparse\";\r\n\r\n// CSV data after parsing\r\nexport type ParsedData = {\r\n  headers: string[];\r\n  rows: string[][];\r\n};\r\n\r\n// what goes into the redux store\r\ntype DataState = {\r\n  raw?: string;\r\n  headers?: string[];\r\n  rows?: string[][];\r\n};\r\nconst initialState: DataState = {};\r\n\r\n// create the slice\r\nexport const dataSlice = createSlice({\r\n  name: \"data\",\r\n  initialState,\r\n  reducers: {\r\n    setRawData: (state: DataState, action: PayloadAction<string>) => {\r\n      state.raw = action.payload;\r\n    },\r\n    setParsedData: (state: DataState, action: PayloadAction<ParsedData>) => {\r\n      state.headers = action.payload.headers;\r\n      state.rows = action.payload.rows;\r\n    },\r\n  },\r\n});\r\nexport default dataSlice.reducer;\r\n\r\nconst { setRawData, setParsedData } = dataSlice.actions;\r\n\r\n// exported actions\r\nexport function loadData(input: string): AppThunk {\r\n  return (dispatch) => {\r\n    dispatch(setRawData(input));\r\n\r\n    // parse the data\r\n    const result = Papa.parse(input, {\r\n      skipEmptyLines: \"greedy\",\r\n    });\r\n    const parsedData = trimData({\r\n      headers: result.data[0] || [],\r\n      rows: result.data.slice(1),\r\n    } as ParsedData);\r\n\r\n    dispatch(setParsedData(parsedData));\r\n  };\r\n}\r\n\r\n// selectors\r\nexport function selectRawData(state: RootState): string {\r\n  return state.data.raw || \"\";\r\n}\r\n\r\nexport function selectParsedData(state: RootState): ParsedData {\r\n  return {\r\n    headers: state.data.headers || [],\r\n    rows: state.data.rows || [],\r\n  };\r\n}\r\n\r\n// trim whitespace from data\r\nfunction trimData(data: ParsedData): ParsedData {\r\n  return {\r\n    headers: data.headers.map((x) => x.trim()),\r\n    rows: data.rows.map((row) => row.map((x) => x.trim())),\r\n  };\r\n}\r\n","import marked from \"marked\";\r\nimport DOMPurify from \"dompurify\";\r\nimport htmlToText from \"html-to-text\";\r\nimport { ParsedData } from \"../features/data/dataSlice\";\r\nimport { Message, MessageFormat, StandardHeaders } from \"./messageTypes\";\r\n\r\n// settings for libraries\r\nconst MARKED_OPTIONS = {\r\n  smartLists: true,\r\n  smartypants: true,\r\n  xhtml: true,\r\n};\r\n\r\nconst HTML_TO_TEXT_OPTIONS = {\r\n  hideLinkHrefIfSameAsText: true,\r\n  tables: true,\r\n};\r\n\r\n// reserved keywords that can't be used as header variable names\r\nexport const RESERVED_KEYWORDS: string[] = [\"ARGV\"];\r\n\r\n// type definitions\r\ntype SpamDataObject = {\r\n  [key: string]: string | string[];\r\n};\r\ntype MessageTemplater = (spam: SpamDataObject) => Message;\r\ntype FieldTemplater = (spam: SpamDataObject) => string;\r\n\r\n// convert ParsedData format into a list of SpamDataObject\r\n// to be used with templating functions\r\nexport function makeSpamObjectArray(data: ParsedData): SpamDataObject[] {\r\n  return data.rows.map((row, index) => makeSpamObject(data, index));\r\n}\r\n\r\n// convert a single row of data into SpamDataObject\r\nexport function makeSpamObject(\r\n  data: ParsedData,\r\n  index: number\r\n): SpamDataObject {\r\n  const { headers, rows } = data;\r\n  const row = rows[index] || [];\r\n  const spamObj: SpamDataObject = {};\r\n\r\n  // data entries indexed by header name\r\n  headers.forEach((name, index) => {\r\n    if (name) {\r\n      spamObj[name] = row[index] || \"\";\r\n    }\r\n  });\r\n\r\n  // all data entries as an array\r\n  spamObj[\"ARGV\"] = row;\r\n\r\n  return spamObj;\r\n}\r\n\r\n// given a message template, create a function that takes in a\r\n// SpamDataObject and returns a templated, processed message\r\nexport function makeMessageTemplater(template: Message): MessageTemplater {\r\n  const headerTemplaters: Record<StandardHeaders, FieldTemplater | Error> = {\r\n    from: makeFieldTemplater(template.from),\r\n    sender: makeFieldTemplater(template.sender),\r\n    to: makeFieldTemplater(template.to),\r\n    cc: makeFieldTemplater(template.cc),\r\n    bcc: makeFieldTemplater(template.bcc),\r\n    replyTo: makeFieldTemplater(template.replyTo),\r\n    inReplyTo: makeFieldTemplater(template.inReplyTo),\r\n    references: makeFieldTemplater(template.references),\r\n    subject: makeFieldTemplater(template.subject),\r\n    messageId: makeFieldTemplater(template.messageId),\r\n    date: makeFieldTemplater(template.date),\r\n  };\r\n  const bodyTemplater = makeFieldTemplater(template.raw);\r\n  const attachmentNameTemplater = makeFieldTemplater(template.attachmentNames);\r\n\r\n  return function (spam) {\r\n    const templatedMessage: Message = {\r\n      host: template.host,\r\n      bodyFormat: template.bodyFormat,\r\n      attachments: [],\r\n      errors: template.errors || [],\r\n    };\r\n\r\n    // templating the message headers\r\n    for (const key in headerTemplaters) {\r\n      const field = key as StandardHeaders;\r\n      const templater = headerTemplaters[field];\r\n      if (typeof templater === \"function\") {\r\n        try {\r\n          const result = templater(spam);\r\n          // skip blank headers\r\n          if (result) {\r\n            templatedMessage[field] = result;\r\n          }\r\n        } catch (e) {\r\n          // error occured while templating\r\n          templatedMessage.errors?.push(\r\n            renameError(e, `Error in field \"${key}\"`)\r\n          );\r\n        }\r\n      } else {\r\n        // error occured while creating templater function\r\n        templatedMessage.errors?.push(\r\n          renameError(templater, `Error in field \"${key}\"`)\r\n        );\r\n      }\r\n    }\r\n\r\n    // templating the raw message body\r\n    if (typeof bodyTemplater === \"function\") {\r\n      try {\r\n        templatedMessage.raw = bodyTemplater(spam);\r\n      } catch (e) {\r\n        // error occured while templating\r\n        templatedMessage.errors?.push(renameError(e, \"Error in message body\"));\r\n      }\r\n    } else {\r\n      // error occured while creating templater function\r\n      templatedMessage.errors?.push(\r\n        renameError(bodyTemplater, \"Error in message body\")\r\n      );\r\n    }\r\n\r\n    // attempt to add filename attachments\r\n    template.attachments.forEach((file) => {\r\n      if (templatedMessage.raw?.includes(file.filename)) {\r\n        templatedMessage.raw = templatedMessage.raw?.replaceAll(\r\n          file.filename,\r\n          `cid:${file.cid}`\r\n        );\r\n        templatedMessage.attachments.push({\r\n          ...file,\r\n          contentDisposition: \"inline\",\r\n        });\r\n      }\r\n    });\r\n\r\n    // copying over custom headers\r\n    if (template.headers) {\r\n      templatedMessage.headers = template.headers;\r\n    }\r\n\r\n    // template attachment names\r\n    if (typeof attachmentNameTemplater === \"function\") {\r\n      try {\r\n        const result = attachmentNameTemplater(spam);\r\n        if (result) {\r\n          templatedMessage.attachmentNames = result;\r\n        }\r\n      } catch (e) {\r\n        // error occured while templating\r\n        templatedMessage.errors?.push(\r\n          renameError(e, \"Error in attachment names\")\r\n        );\r\n      }\r\n    } else {\r\n      // error occured while creating templater function\r\n      templatedMessage.errors?.push(\r\n        renameError(attachmentNameTemplater, \"Error in attachment names\")\r\n      );\r\n    }\r\n\r\n    // match attachmentNames to attachments with attachment disposition\r\n    if (templatedMessage.attachmentNames) {\r\n      templatedMessage.attachmentNames\r\n        .split(\",\")\r\n        .map((name) => name.trim())\r\n        .forEach((name) => {\r\n          const file = template.attachments.find(\r\n            (file) => file.filename === name\r\n          );\r\n          if (!file) {\r\n            templatedMessage.errors?.push(\r\n              Error(`Could not find attachment with name ${name}`)\r\n            );\r\n          } else {\r\n            templatedMessage.attachments.push({\r\n              ...file,\r\n              contentDisposition: \"attachment\",\r\n            });\r\n          }\r\n        });\r\n    }\r\n\r\n    // convert from raw to processed message\r\n    return postprocess(templatedMessage);\r\n  };\r\n}\r\n\r\n// create a per-field templating function\r\nfunction makeFieldTemplater(field?: string): FieldTemplater | Error {\r\n  if (!field) {\r\n    return () => \"\";\r\n  }\r\n  try {\r\n    // eslint-disable-next-line no-new-func\r\n    return Function(\"SPAM\", `return \\`${field}\\``) as FieldTemplater;\r\n  } catch (e) {\r\n    // an error occured while creating the function\r\n    return e;\r\n  }\r\n}\r\n\r\n// rename an error to include a more helpful message\r\nfunction renameError(error: Error, name: string): Error {\r\n  const newError = Error(error.toString());\r\n  newError.name = name;\r\n  return newError;\r\n}\r\n\r\n// postprocess raw message body into html/text format\r\nfunction postprocess(message: Message): Message {\r\n  const output = { ...message };\r\n\r\n  // message is in Markdown format\r\n  if (message.raw && message.bodyFormat === MessageFormat.MARKDOWN) {\r\n    const unsanitizedHtml = marked(message.raw, MARKED_OPTIONS);\r\n    output.html = DOMPurify.sanitize(unsanitizedHtml);\r\n    output.text = htmlToText.fromString(output.html, HTML_TO_TEXT_OPTIONS);\r\n  }\r\n\r\n  // message is in raw HTML format\r\n  if (message.raw && message.bodyFormat === MessageFormat.HTML) {\r\n    output.html = DOMPurify.sanitize(message.raw);\r\n    output.text = htmlToText.fromString(output.html, HTML_TO_TEXT_OPTIONS);\r\n  }\r\n\r\n  // message is in plain text format\r\n  if (message.raw && message.bodyFormat === MessageFormat.PLAINTEXT) {\r\n    output.text = message.raw;\r\n  }\r\n\r\n  // missing raw message body\r\n  if (!message.raw) {\r\n    output.text = \"\";\r\n  }\r\n\r\n  if (output.html) {\r\n    // pictures we couldn't find attachments for\r\n    [...output.html.matchAll(/src=\"(?!cid:)(.*)\"/g)].forEach((match) => {\r\n      output.errors?.push(\r\n        Error(`Could not find attachment with name ${match[1]}`)\r\n      );\r\n    });\r\n  }\r\n\r\n  output.bodyFormat = MessageFormat.PROCESSED;\r\n  return output;\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\nimport {\r\n  Message,\r\n  MessageFormat,\r\n  StandardHeaders,\r\n  Attachment,\r\n} from \"../../utils/messageTypes\";\r\n\r\n// what goes into the redux store\r\nconst initialState: Message = {\r\n  bodyFormat: MessageFormat.MARKDOWN,\r\n  attachments: [],\r\n};\r\n\r\n// create the slice\r\nexport const messageSlice = createSlice({\r\n  name: \"template\",\r\n  initialState,\r\n  reducers: {\r\n    setHost: (state: Message, action: PayloadAction<string>) => {\r\n      state.host = action.payload;\r\n    },\r\n    setMessageFormat: (\r\n      state: Message,\r\n      action: PayloadAction<MessageFormat>\r\n    ) => {\r\n      state.bodyFormat = action.payload;\r\n    },\r\n    setRawBody: (state: Message, action: PayloadAction<string>) => {\r\n      state.raw = action.payload;\r\n    },\r\n    setHeader: (\r\n      state: Message,\r\n      action: PayloadAction<{ header: StandardHeaders; value: string }>\r\n    ) => {\r\n      state[action.payload.header] = action.payload.value;\r\n    },\r\n    setAttachmentNames: (state: Message, action: PayloadAction<string>) => {\r\n      state.attachmentNames = action.payload;\r\n    },\r\n    addAttachments: (state: Message, action: PayloadAction<Attachment[]>) => {\r\n      state.attachments.push(...action.payload);\r\n    },\r\n  },\r\n});\r\nexport default messageSlice.reducer;\r\n\r\n// exported actions\r\nexport const {\r\n  setHost,\r\n  setMessageFormat,\r\n  setRawBody,\r\n  setHeader,\r\n  setAttachmentNames,\r\n  addAttachments,\r\n} = messageSlice.actions;\r\n\r\n// selectors\r\nexport function selectHost(state: RootState) {\r\n  return state.template.host;\r\n}\r\n\r\nexport function selectMessageTemplate(state: RootState) {\r\n  return state.template;\r\n}\r\n\r\nexport function selectMessageFormat(state: RootState) {\r\n  return state.template.bodyFormat;\r\n}\r\n\r\nexport function selectRawBody(state: RootState) {\r\n  return state.template.raw;\r\n}\r\n\r\nexport function selectAttachmentNames(state: RootState) {\r\n  return state.template.attachmentNames;\r\n}\r\n\r\nexport function selectAttachments(state: RootState) {\r\n  return state.template.attachments;\r\n}\r\n\r\nexport function selectHeader(field: StandardHeaders) {\r\n  return function (state: RootState) {\r\n    return state.template[field];\r\n  };\r\n}\r\n\r\nexport function selectCustomHeader(field: string) {\r\n  return function (state: RootState) {\r\n    return state.template.headers ? state.template.headers[field] : undefined;\r\n  };\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { MessageFormat } from \"../../utils/messageTypes\";\r\nimport {\r\n  selectHost,\r\n  selectMessageFormat,\r\n  setMessageFormat,\r\n  selectRawBody,\r\n  setHost,\r\n  setRawBody,\r\n  selectHeader,\r\n  setHeader,\r\n  selectAttachmentNames,\r\n  setAttachmentNames,\r\n} from \"./messageSlice\";\r\n\r\nexport default function Form() {\r\n  const [showExtra, setShowExtra] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  // host\r\n  const host = useSelector(selectHost);\r\n\r\n  // headers\r\n  const from = useSelector(selectHeader(\"from\"));\r\n  const to = useSelector(selectHeader(\"to\"));\r\n  const cc = useSelector(selectHeader(\"cc\"));\r\n  const bcc = useSelector(selectHeader(\"bcc\"));\r\n  const replyTo = useSelector(selectHeader(\"replyTo\"));\r\n  const sender = useSelector(selectHeader(\"sender\"));\r\n  const inReplyTo = useSelector(selectHeader(\"inReplyTo\"));\r\n  const subject = useSelector(selectHeader(\"subject\"));\r\n\r\n  // message body\r\n  const messageFormat = useSelector(selectMessageFormat);\r\n  const messageText = useSelector(selectRawBody);\r\n\r\n  // attachments\r\n  const attachmentNames = useSelector(selectAttachmentNames);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">From</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={from || \"\"}\r\n            placeholder=\"Your Name <example@mit.edu>\"\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"from\", value: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"help\">Should be an @mit.edu or @esp.mit.edu address</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">To</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={to || \"\"}\r\n            placeholder={`\\${SPAM.email}`}\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"to\", value: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"help\">Main recipients of your message</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">Cc</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={cc || \"\"}\r\n            placeholder=\"test1@example.com, test2@example.com\"\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"cc\", value: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"help\">Additional recipients of your message</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* hide additional fields */}\r\n      {!showExtra && (\r\n        <div className=\"has-text-centered\">\r\n          <a\r\n            onClick={(event) => {\r\n              setShowExtra(true);\r\n              event.preventDefault();\r\n            }}\r\n          >\r\n            Show additional fields...\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      {/* show additional fields */}\r\n      {showExtra && (\r\n        <>\r\n          <div className=\"has-text-centered\">\r\n            <a\r\n              onClick={(event) => {\r\n                setShowExtra(false);\r\n                event.preventDefault();\r\n              }}\r\n            >\r\n              Hide additional fields...\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Host</label>\r\n              <select\r\n                className=\"input\"\r\n                value={host || \"\"}\r\n                placeholder=\"outgoing.mit.edu\"\r\n                onChange={(e) => dispatch(setHost(e.target.value))}\r\n              >\r\n                <option value=\"outgoing.mit.edu\">outgoing.mit.edu</option>\r\n                <option value=\"esp-mail.mit.edu\">esp-mail.mit.edu</option>\r\n              </select>\r\n              <p className=\"help\">\r\n                Email server to send through; if esp-mail.mit.edu, From field\r\n                should be an @esp.mit.edu address\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Bcc</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={bcc || \"\"}\r\n                placeholder=\"test3@example.com\"\r\n                onChange={(e) =>\r\n                  dispatch(setHeader({ header: \"bcc\", value: e.target.value }))\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                Additional hidden recipients of your message\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Reply-To</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={replyTo || \"\"}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    setHeader({ header: \"replyTo\", value: e.target.value })\r\n                  )\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                Optional email address that you want people to send replies to\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">Sender</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={sender || \"\"}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    setHeader({ header: \"sender\", value: e.target.value })\r\n                  )\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                If From is not an @mit.edu / @esp.mit.edu address, set this to\r\n                an @mit.edu / @esp.mit.edu address to send on behalf of an\r\n                external address\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <label className=\"label\">In-Reply-To</label>\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={inReplyTo || \"\"}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    setHeader({ header: \"inReplyTo\", value: e.target.value })\r\n                  )\r\n                }\r\n              />\r\n              <p className=\"help\">\r\n                For replying to previous messages (leave blank if you don't know\r\n                what this is)\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* subject field */}\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">Subject</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={subject || \"\"}\r\n            placeholder={`Automated spam message for \\${SPAM.name}`}\r\n            onChange={(e) =>\r\n              dispatch(setHeader({ header: \"subject\", value: e.target.value }))\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* message textbox */}\r\n      <div className=\"field\">\r\n        <label className=\"label\">Message</label>\r\n        {/* message type selector */}\r\n        <div className=\"tabs is-toggle is-small mb-3\">\r\n          <ul>\r\n            <li\r\n              className={\r\n                messageFormat === MessageFormat.MARKDOWN ? \"is-active\" : \"\"\r\n              }\r\n            >\r\n              <a\r\n                onClick={(e) => {\r\n                  dispatch(setMessageFormat(MessageFormat.MARKDOWN));\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                Markdown\r\n              </a>\r\n            </li>\r\n            <li\r\n              className={\r\n                messageFormat === MessageFormat.HTML ? \"is-active\" : \"\"\r\n              }\r\n            >\r\n              <a\r\n                onClick={(e) => {\r\n                  dispatch(setMessageFormat(MessageFormat.HTML));\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                HTML\r\n              </a>\r\n            </li>\r\n            <li\r\n              className={\r\n                messageFormat === MessageFormat.PLAINTEXT ? \"is-active\" : \"\"\r\n              }\r\n            >\r\n              <a\r\n                onClick={(e) => {\r\n                  dispatch(setMessageFormat(MessageFormat.PLAINTEXT));\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                Plain text\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <textarea\r\n          className=\"textarea\"\r\n          value={messageText || \"\"}\r\n          rows={20}\r\n          placeholder={placeholderText}\r\n          onChange={(e) => dispatch(setRawBody(e.target.value))}\r\n        ></textarea>\r\n      </div>\r\n\r\n      {/* attachment field */}\r\n      <div className=\"field\">\r\n        <div className=\"control\">\r\n          <label className=\"label\">Attachments</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={attachmentNames || \"\"}\r\n            placeholder={`file1.png, file2.png`}\r\n            onChange={(e) => dispatch(setAttachmentNames(e.target.value))}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const placeholderText = `\r\nDear \\${SPAM.name},\r\n\r\nThis is a friendly reminder that your appointment is scheduled for **tomorrow** at \\${SPAM.time}.\r\n\r\nIf you have any questions, please visit [our website](https://example.com).\r\n\r\nSincerely,<br>\r\nYour Name\r\n`.trim();\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype NavBarProps = {\r\n  title: string;\r\n  nextPage?: () => void;\r\n  prevPage?: () => void;\r\n  showNext: boolean;\r\n  showPrev: boolean;\r\n};\r\n\r\nconst defaultProps = {\r\n  title: \"\",\r\n  nextPage: () => {\r\n    return false;\r\n  },\r\n  prevPage: () => {\r\n    return false;\r\n  },\r\n  showNext: false,\r\n  showPrev: false,\r\n};\r\n\r\nexport default function NavBar(props: NavBarProps = defaultProps) {\r\n  return (\r\n    <div>\r\n      <nav className=\"container pt-5\">\r\n        <div className=\"level is-mobile\">\r\n          {/* previous page button */}\r\n          <div className=\"level-left has-text-centered\">\r\n            <button\r\n              onClick={props.prevPage}\r\n              className={\r\n                \"button is-success \" + (props.showPrev ? \"\" : \"is-invisible\")\r\n              }\r\n            >\r\n              <span className=\"icon\">\r\n                <FontAwesomeIcon icon={faAngleLeft} transform=\"down-1\" />\r\n              </span>\r\n              <span>Back</span>\r\n            </button>\r\n          </div>\r\n\r\n          {/* main title */}\r\n          <div className=\"level-item\">\r\n            <div className=\"title is-3 py-1\">{props.title}</div>\r\n          </div>\r\n\r\n          {/* next page button */}\r\n          <div className=\"level-right has-text-centered\">\r\n            <button\r\n              onClick={props.nextPage}\r\n              className={\r\n                \"button is-success \" + (props.showNext ? \"\" : \"is-invisible\")\r\n              }\r\n            >\r\n              <span>Next</span>\r\n              <span className=\"icon\">\r\n                <FontAwesomeIcon icon={faAngleRight} transform=\"down-1\" />\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"../../store\";\r\nimport { loadData, selectRawData, selectParsedData } from \"./dataSlice\";\r\nimport { MessageFormat } from \"../../utils/messageTypes\";\r\nimport { RESERVED_KEYWORDS } from \"../../utils/templating\";\r\nimport {\r\n  setMessageFormat,\r\n  setRawBody,\r\n  setHeader,\r\n} from \"../message/messageSlice\";\r\nimport { placeholderText as messageBodyPlaceholder } from \"../message/Form\";\r\nimport NavBar from \"../NavBar\";\r\n\r\ntype DataPageProps = {\r\n  nextPage: () => void;\r\n  prevPage: () => void;\r\n};\r\n\r\nconst placeholderText = `\r\nemail, name, time\r\naphacker@mit.edu, Alyssa P. Hacker, 9:00 AM\r\nbitdiddle@mit.edu, Ben Bitdiddle, 11:00 AM\r\npembroke@mit.edu, Edward S. Pembroke, 2:00 PM\r\n`.trim();\r\n\r\nexport default function DataPage(props: DataPageProps) {\r\n  const inputStr = useSelector(selectRawData);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      {/* nav bar */}\r\n      <NavBar\r\n        title=\"Enter your data\"\r\n        nextPage={props.nextPage}\r\n        prevPage={props.prevPage}\r\n        showNext={true}\r\n        showPrev={true}\r\n      />\r\n\r\n      <div>\r\n        <div className=\"container px-3 pb-3\">\r\n          {/* text entry box */}\r\n          <div className=\"field\">\r\n            <label className=\"label\">\r\n              Enter data as a tab- or comma-separated array. The first line\r\n              should be a header row with variable names.\r\n            </label>\r\n            <textarea\r\n              className=\"textarea\"\r\n              value={inputStr || \"\"}\r\n              placeholder={placeholderText}\r\n              onChange={(e) => dispatch(loadData(e.target.value))}\r\n              rows={20}\r\n              autoFocus={true}\r\n              spellCheck=\"false\"\r\n              wrap=\"off\"\r\n            />\r\n            {!inputStr && (\r\n              <p className=\"pt-1\">\r\n                ({/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n                <a\r\n                  onClick={(e) => {\r\n                    loadExample(dispatch);\r\n                    e.preventDefault();\r\n                  }}\r\n                >\r\n                  Click here to load sample data and message\r\n                </a>\r\n                )\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {/* data preview table */}\r\n          <DataTable />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// generate a html table displaying parsed data\r\nfunction DataTable() {\r\n  const { headers, rows } = useSelector(selectParsedData);\r\n  const forbiddenHeaders = headers.filter((x) => RESERVED_KEYWORDS.includes(x));\r\n\r\n  return (\r\n    <>\r\n      {/* return nothing if headers is empty */}\r\n      {!!headers?.length && (\r\n        <div className=\"py-3\">\r\n          <p className=\"label\">Preview</p>\r\n\r\n          {/* table */}\r\n          <div className=\"table-container mb-2\">\r\n            <table className=\"table is-bordered is-hoverable\">\r\n              {/* header row */}\r\n              <thead className=\"has-background-light\">\r\n                <tr>\r\n                  {headers.map((item, index) => {\r\n                    return <th key={index}>{item}</th>;\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n\r\n              {/* data rows */}\r\n              <tbody>\r\n                {rows?.map((row, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      {row.map((item, index) => {\r\n                        return <td key={index}>{item}</td>;\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          {/* message count */}\r\n          <p>Number of emails: {rows?.length || 0}</p>\r\n\r\n          {/* errors */}\r\n          {forbiddenHeaders.length > 0 && (\r\n            <div className=\"pt-5\">\r\n              {forbiddenHeaders.map((h, index) => {\r\n                return (\r\n                  <div key={index} className=\"message is-danger\">\r\n                    <div className=\"message-body\">\r\n                      <span className=\"has-text-weight-bold\">{h}</span> is a\r\n                      special keyword. Please choose a different variable name.\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// load sample data and message\r\nfunction loadExample(dispatch: AppDispatch) {\r\n  dispatch(loadData(placeholderText));\r\n  dispatch(setHeader({ header: \"from\", value: \"Your Name <example@mit.edu>\" }));\r\n  dispatch(setHeader({ header: \"to\", value: `\\${SPAM.email}` }));\r\n  dispatch(\r\n    setHeader({\r\n      header: \"subject\",\r\n      value: `Automated spam message for \\${SPAM.name}`,\r\n    })\r\n  );\r\n  dispatch(setMessageFormat(MessageFormat.MARKDOWN));\r\n  dispatch(setRawBody(messageBodyPlaceholder));\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEnvelope,\r\n  faQuestionCircle,\r\n} from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faPaperclip } from \"@fortawesome/free-solid-svg-icons\";\r\nimport NavBar from \"../NavBar\";\r\nimport Form from \"./Form\";\r\nimport PreviewTab from \"./PreviewTab\";\r\nimport HelpTab from \"./HelpTab\";\r\nimport AttachmentsTab from \"./AttachmentsTab\";\r\n\r\ntype MessagePageProps = {\r\n  nextPage: () => void;\r\n  prevPage: () => void;\r\n};\r\n\r\n// selects which tab is active\r\nenum Tab {\r\n  PREVIEW,\r\n  HELP,\r\n  ATTACHMENTS,\r\n}\r\nconst defaultTab: Tab = Tab.PREVIEW;\r\n\r\nexport default function MessagePage(props: MessagePageProps) {\r\n  const [currentTab, setCurrentTab] = useState(defaultTab);\r\n\r\n  return (\r\n    <>\r\n      {/* nav bar */}\r\n      <NavBar\r\n        title=\"Write your message\"\r\n        nextPage={props.nextPage}\r\n        prevPage={props.prevPage}\r\n        showNext={true}\r\n        showPrev={true}\r\n      />\r\n\r\n      <div className=\"fill-height\">\r\n        <div className=\"container px-3 pb-3 fullheight-container\">\r\n          <div className=\"columns is-desktop is-variable is-4 my-0 fullheight-container\">\r\n            {/* left panel: form for message template */}\r\n            <div className=\"column\">\r\n              <div className=\"fullheight-column\">\r\n                <div className=\"scrollable\">\r\n                  <Form />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* right panel: preview etc */}\r\n            <div className=\"column fullheight-container\">\r\n              <div className=\"card fullheight-card\">\r\n                {/* navigation tabs */}\r\n                <nav className=\"card-footer\">\r\n                  <div className=\"card-footer-item tabs is-fullwidth pt-1\">\r\n                    <ul>\r\n                      <li\r\n                        className={\r\n                          currentTab === Tab.PREVIEW ? \"is-active\" : \"\"\r\n                        }\r\n                      >\r\n                        <a\r\n                          onClick={(e) => {\r\n                            setCurrentTab(Tab.PREVIEW);\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <span className=\"icon\">\r\n                            <FontAwesomeIcon icon={faEnvelope} fixedWidth />\r\n                          </span>\r\n                          <span>Preview</span>\r\n                        </a>\r\n                      </li>\r\n                      <li\r\n                        className={currentTab === Tab.HELP ? \"is-active\" : \"\"}\r\n                      >\r\n                        <a\r\n                          onClick={(e) => {\r\n                            setCurrentTab(Tab.HELP);\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <span className=\"icon\">\r\n                            <FontAwesomeIcon\r\n                              icon={faQuestionCircle}\r\n                              fixedWidth\r\n                            />\r\n                          </span>\r\n                          <span>Help</span>\r\n                        </a>\r\n                      </li>\r\n                      <li\r\n                        className={\r\n                          currentTab === Tab.ATTACHMENTS ? \"is-active\" : \"\"\r\n                        }\r\n                      >\r\n                        <a\r\n                          onClick={(e) => {\r\n                            setCurrentTab(Tab.ATTACHMENTS);\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <span className=\"icon\">\r\n                            <FontAwesomeIcon\r\n                              icon={faPaperclip}\r\n                              transform=\"shrink-1\"\r\n                              fixedWidth\r\n                            />\r\n                          </span>\r\n                          <span>Attachments</span>\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </nav>\r\n\r\n                {/* render the desired element */}\r\n                <div className=\"card-content pt-3 fill-height\">\r\n                  <div className=\"fullheight-column\">\r\n                    <div className=\"scrollable\">\r\n                      {currentTab === Tab.PREVIEW && <PreviewTab />}\r\n                      {currentTab === Tab.HELP && <HelpTab />}\r\n                      {currentTab === Tab.ATTACHMENTS && <AttachmentsTab />}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Message } from \"../../utils/messageTypes\";\r\n\r\n// renders an in-browser preview of an email message\r\n// the additionalErrors property allows further errors to be displayed\r\n// (e.g. those encountered while trying to send the message)\r\nexport default function MessagePreview(props: {\r\n  message: Message;\r\n  additionalErrors?: Error[];\r\n}) {\r\n  const headerStyle = \"has-text-weight-bold\";\r\n  const emptyStyle = \"has-text-grey-light\";\r\n  const mandatory = {\r\n    from: props.message.from || \"(empty)\",\r\n    fromClass: props.message.from ? \"\" : emptyStyle,\r\n    to: props.message.to || \"(empty)\",\r\n    toClass: props.message.to ? \"\" : emptyStyle,\r\n    subject: props.message.subject || \"(empty)\",\r\n    subjectClass: props.message.subject ? \"\" : emptyStyle,\r\n  };\r\n\r\n  const attachments = props.message.attachments.filter(\r\n    (file) => file.contentDisposition === \"attachment\"\r\n  );\r\n\r\n  // change the CIDs to inlined images\r\n  let html = props.message.html;\r\n  props.message.attachments.forEach((file) => {\r\n    if (file.contentDisposition === \"inline\") {\r\n      html = html?.replaceAll(\r\n        `cid:${file.cid}`,\r\n        `data:${file.contentType};base64,${file.content}`\r\n      );\r\n    }\r\n  });\r\n\r\n  // array of all errors (empty array if no errors)\r\n  const errors = (props.message.errors || []).concat(\r\n    props.additionalErrors || []\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {/* headers */}\r\n      <div className=\"add-paragraph-spacing\">\r\n        <p>\r\n          <span className={headerStyle}>From:</span>{\" \"}\r\n          <span className={mandatory.fromClass}>{mandatory.from}</span>\r\n        </p>\r\n\r\n        <p>\r\n          <span className={headerStyle}>To:</span>{\" \"}\r\n          <span className={mandatory.toClass}>{mandatory.to}</span>\r\n        </p>\r\n\r\n        {props.message.cc && (\r\n          <p>\r\n            <span className={headerStyle}>Cc:</span> {props.message.cc}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.bcc && (\r\n          <p>\r\n            <span className={headerStyle}>Bcc:</span> {props.message.bcc}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.replyTo && (\r\n          <p>\r\n            <span className={headerStyle}>Reply-To:</span>{\" \"}\r\n            {props.message.replyTo}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.sender && (\r\n          <p>\r\n            <span className={headerStyle}>Sender:</span> {props.message.sender}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.inReplyTo && (\r\n          <p>\r\n            <span className={headerStyle}>In-Reply-To:</span>{\" \"}\r\n            {props.message.inReplyTo}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.references && (\r\n          <p>\r\n            <span className={headerStyle}>References:</span>{\" \"}\r\n            {props.message.references}\r\n          </p>\r\n        )}\r\n\r\n        <p>\r\n          <span className={headerStyle}>Subject:</span>{\" \"}\r\n          <span className={mandatory.subjectClass}>{mandatory.subject}</span>\r\n        </p>\r\n\r\n        {props.message.messageId && (\r\n          <p>\r\n            <span className={headerStyle}>Message-ID:</span>{\" \"}\r\n            {props.message.messageId}\r\n          </p>\r\n        )}\r\n\r\n        {props.message.date && (\r\n          <p>\r\n            <span className={headerStyle}>Date:</span> {props.message.date}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {/* body */}\r\n      <div className=\"pt-3 break-overflow\">\r\n        {/* HTML body, if it exists */}\r\n        {html && (\r\n          <div\r\n            className=\"content\"\r\n            dangerouslySetInnerHTML={{ __html: html }}\r\n          />\r\n        )}\r\n\r\n        {/* plain text body, if HTML does not exist */}\r\n        {!props.message.html && props.message.text && (\r\n          <pre className=\"wrap-text\">{props.message.text}</pre>\r\n        )}\r\n\r\n        {/* missing email body */}\r\n        {!props.message.html && !props.message.text && (\r\n          <p className={emptyStyle}>(message is blank)</p>\r\n        )}\r\n      </div>\r\n\r\n      {attachments.length > 0 && (\r\n        <div className=\"pt-3 content break-overflow\">\r\n          <b>Attachments:</b>\r\n          <ul>\r\n            {attachments.map((file, i) => (\r\n              <li key={i}>{file.filename}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      {/* errors */}\r\n      {errors.length > 0 && (\r\n        <div className=\"pt-5\">\r\n          {errors.map((error, index) => {\r\n            return (\r\n              <div key={index} className=\"message is-danger\">\r\n                <div className=\"message-body\">\r\n                  {error.name && (\r\n                    <span className={headerStyle}>[{error.name}] </span>\r\n                  )}\r\n                  {error.message}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectMessageTemplate } from \"./messageSlice\";\r\nimport { selectParsedData } from \"../data/dataSlice\";\r\nimport { makeSpamObject, makeMessageTemplater } from \"../../utils/templating\";\r\nimport MessagePreview from \"./MessagePreview\";\r\n\r\nexport default function PreviewTab() {\r\n  const template = useSelector(selectMessageTemplate);\r\n  const data = useSelector(selectParsedData);\r\n\r\n  const templater = useMemo(() => makeMessageTemplater(template), [template]);\r\n  const spam = useMemo(() => makeSpamObject(data, 0), [data]);\r\n  const preview = templater(spam);\r\n\r\n  //const preview = template;\r\n\r\n  return <MessagePreview message={preview} />;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function HelpTab() {\r\n  return (\r\n    <div className=\"content\">\r\n      <h3>Inserting variables</h3>\r\n      <p>\r\n        In your data, each value in the header row defines a variable name. The\r\n        spam script generates one email for each subsequent row of data.\r\n      </p>\r\n      <p>\r\n        Variables are stored in the <code>SPAM</code> object, and substitutions\r\n        are done using <code>{`\\${}`}</code> syntax. You can insert a variable\r\n        named <code>xyz</code> into your email by writing{\" \"}\r\n        <code>{`\\${SPAM.xyz}`}</code> or by writing{\" \"}\r\n        <code>{`\\${SPAM[\"xyz\"]}`}</code>. The latter syntax is necessary if your\r\n        variable name contains special characters like spaces.\r\n      </p>\r\n      <p>\r\n        The message that you write is evaulated as a Javascript{\" \"}\r\n        <a\r\n          href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          template literal\r\n        </a>\r\n        . You can include arbitrary Javascript code inside the{\" \"}\r\n        <code>{`\\${}`}</code> expressions.\r\n      </p>\r\n      <p>\r\n        In addition, you can access non-named data entries by index via the\r\n        special value of <code>SPAM.ARGV</code>, an array that contains the\r\n        entire data row. This can be used to generate things like\r\n        variable-length tables inside your email.\r\n      </p>\r\n\r\n      <h3>Special characters</h3>\r\n      <ul>\r\n        <li>\r\n          To insert a literal backslash (<code>\\</code>), write <code>\\\\</code>.\r\n        </li>\r\n        <li>\r\n          To insert a literal backtick (<code>`</code>), write <code>\\`</code>.\r\n        </li>\r\n        <li>\r\n          To insert a literal <code>{`\\${`}</code>, escape the dollar sign like\r\n          this: <code>{`\\\\\\${}`}</code>.\r\n        </li>\r\n        <li>\r\n          To insert a special Unicode code point, use{\" \"}\r\n          <code>{`\\\\u{XXXXX}`}</code>.\r\n        </li>\r\n      </ul>\r\n\r\n      <h3>Markdown</h3>\r\n      <p>\r\n        If you are using Markdown mode, you can apply formatting to your message\r\n        with{\" \"}\r\n        <a\r\n          href=\"https://www.markdownguide.org/cheat-sheet/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Markdown syntax\r\n        </a>\r\n        . The table below shows a few commonly used elements.\r\n      </p>\r\n      <table className=\"table is-bordered is-hoverable fixed-table\">\r\n        <thead className=\"has-background-light\">\r\n          <tr>\r\n            <th>Markdown</th>\r\n            <th>Result</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <code># Heading 1</code>\r\n            </td>\r\n            <td className=\"title is-4 mx-0 my-0\">Heading 1</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>## Heading 2</code>\r\n            </td>\r\n            <td className=\"title is-5\">Heading 2</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>*Italic*</code>\r\n            </td>\r\n            <td>\r\n              <em>Italic</em>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>**Bold**</code>\r\n            </td>\r\n            <td className=\"has-text-weight-bold\">Bold</td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>~~Strikethrough~~</code>\r\n            </td>\r\n            <td>\r\n              <s>Strikethrough</s>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>* List</code>\r\n            </td>\r\n            <td>\r\n              <ul className=\"mx-4 my-0\">\r\n                <li>List</li>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>\\`Code\\`</code>\r\n            </td>\r\n            <td>\r\n              <code>Code</code>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>[Link](https://example.com)</code>\r\n            </td>\r\n            <td>\r\n              <a\r\n                href=\"https://example.com\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Link\r\n              </a>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>\r\n              <code>![Image](filename.jpg)</code>\r\n            </td>\r\n            <td>\r\n              <img alt=\"\" src=\"https://picsum.photos/100\" />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <p>\r\n        Because template literal evaluation occurs before Markdown parsing,\r\n        you'll need to escape backticks and other special characters that are\r\n        part of your Markdown. For example, writing{\" \"}\r\n        <code>{`\\\\\\`Code\\\\\\``}</code> will result in the Markdown expression{\" \"}\r\n        <code>{`\\`Code\\``}</code>.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUpload } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Attachment } from \"../../utils/messageTypes\";\r\nimport { addAttachments, selectAttachments } from \"./messageSlice\";\r\n\r\nexport default function AttachmentsTab() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const attachments = useSelector(selectAttachments);\r\n\r\n  /* converts a file to an attachment; returns a promise. */\r\n  const fileToAttachment = (file: File) =>\r\n    new Promise<Attachment>((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const result = reader.result;\r\n        if (typeof result === \"string\") {\r\n          resolve({\r\n            filename: file.name,\r\n            contentType: file.type,\r\n            contentTransferEncoding: \"base64\",\r\n            // RFC 2045 says the \"@\" is required\r\n            cid: `${file.name.replace(/[^a-z0-9.]/gi, \"\")}@esp.mit.edu`,\r\n            // starts with data:*/*;base64,\r\n            content: result.split(\",\")[1],\r\n          });\r\n        } else {\r\n          reject();\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"field\">\r\n        <div className=\"file\">\r\n          <label className=\"file-label\">\r\n            <input\r\n              className=\"file-input\"\r\n              type=\"file\"\r\n              multiple={true}\r\n              onChange={(e) => {\r\n                const newFiles = e.target.files;\r\n                if (!newFiles) return;\r\n                setIsLoading(true);\r\n                Promise.all([...newFiles].map(fileToAttachment)).then(\r\n                  (results) => {\r\n                    dispatch(addAttachments(results));\r\n                    setIsLoading(false);\r\n                  }\r\n                );\r\n              }}\r\n            />\r\n            <span className=\"file-cta\">\r\n              <span className=\"file-icon\">\r\n                <FontAwesomeIcon icon={faUpload} fixedWidth />\r\n              </span>\r\n              <span className=\"file-label\">Choose files…</span>\r\n            </span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n      {/* check if CIDs are distinct */}\r\n      {new Set(attachments.map((file) => file.cid)).size !==\r\n      attachments.length ? (\r\n        <div className=\"message is-warning\">\r\n          <div className=\"message-header\">\r\n            <p>Warning</p>\r\n          </div>\r\n          <div className=\"message-body\">\r\n            Filenames should be distinct! No promises what'll happen when they\r\n            aren't.\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      <div className=\"content\">\r\n        <h3>Filenames:</h3>\r\n        <ul>\r\n          {isLoading ? (\r\n            <li className=\"has-text-grey-light\">(loading...)</li>\r\n          ) : attachments.length === 0 ? (\r\n            <li className=\"has-text-grey-light\">(none selected)</li>\r\n          ) : (\r\n            attachments.map((file, i) => <li key={i}>{file.filename}</li>)\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../store\";\r\nimport { Message } from \"../../utils/messageTypes\";\r\nimport { selectMessageTemplate } from \"../message/messageSlice\";\r\nimport { selectParsedData } from \"../data/dataSlice\";\r\nimport {\r\n  makeSpamObjectArray,\r\n  makeMessageTemplater,\r\n} from \"../../utils/templating\";\r\n\r\nexport enum SendStatus {\r\n  UNSENT,\r\n  QUEUED,\r\n  SENDING,\r\n  SUCCESS,\r\n  ERROR,\r\n}\r\n\r\nexport type MessageSendObject = {\r\n  message: Message;\r\n  status: SendStatus;\r\n  showPreview: boolean;\r\n  error?: SendError;\r\n};\r\n\r\nexport type SendError = {\r\n  name: string;\r\n  message: string;\r\n};\r\n\r\n// what goes into the redux store\r\ntype SendingState = MessageSendObject[];\r\nconst initialState: SendingState = [];\r\n\r\n// create the slice\r\nexport const sendingSlice = createSlice({\r\n  name: \"sending\",\r\n  initialState,\r\n  reducers: {\r\n    setSendingState: (\r\n      state: SendingState,\r\n      action: PayloadAction<SendingState>\r\n    ) => {\r\n      // we want to do state = action.payload\r\n      // except we must modify state in place\r\n      state.length = 0;\r\n      state.push(...action.payload);\r\n    },\r\n\r\n    setMessage: (\r\n      state: SendingState,\r\n      action: PayloadAction<{ index: number; message: Message }>\r\n    ) => {\r\n      if (state[action.payload.index]) {\r\n        state[action.payload.index].message = action.payload.message;\r\n      }\r\n    },\r\n\r\n    setStatus: (\r\n      state: SendingState,\r\n      action: PayloadAction<{ index: number; status: SendStatus }>\r\n    ) => {\r\n      if (state[action.payload.index]) {\r\n        state[action.payload.index].status = action.payload.status;\r\n        // if status is success, clear any errors\r\n        if (action.payload.status === SendStatus.SUCCESS) {\r\n          state[action.payload.index].error = undefined;\r\n        }\r\n      }\r\n    },\r\n\r\n    setError: (\r\n      state: SendingState,\r\n      action: PayloadAction<{ index: number; error: SendError }>\r\n    ) => {\r\n      if (state[action.payload.index]) {\r\n        state[action.payload.index].status = SendStatus.ERROR;\r\n        state[action.payload.index].error = action.payload.error;\r\n      }\r\n    },\r\n\r\n    setShowPreview: (\r\n      state: SendingState,\r\n      action: PayloadAction<{ index?: number; showPreview: boolean }>\r\n    ) => {\r\n      if (action.payload.index === undefined) {\r\n        // index unspecified, set value for all objects\r\n        state.forEach((x) => (x.showPreview = action.payload.showPreview));\r\n      } else {\r\n        // index specified, only modify the given index\r\n        if (state[action.payload.index]) {\r\n          state[action.payload.index].showPreview = action.payload.showPreview;\r\n        }\r\n      }\r\n    },\r\n\r\n    sendMessages: (state: SendingState) => {\r\n      // find indices of all sendable messages\r\n      const sendIndices = state\r\n        .map((x) => x.status)\r\n        .map((status, index) => (shouldSendMessage(status) ? index : -1))\r\n        .filter((index) => index !== -1);\r\n\r\n      // set state to queued\r\n      sendIndices.forEach((index) => (state[index].status = SendStatus.QUEUED));\r\n\r\n      // actual sending is done in sendingEpic\r\n    },\r\n\r\n    cancelSending: (state: SendingState) => {\r\n      // find indices of all messages awaiting sending\r\n      const queuedIndices = state\r\n        .map((x) => x.status)\r\n        .map((status, index) =>\r\n          status === SendStatus.QUEUED || status === SendStatus.SENDING\r\n            ? index\r\n            : -1\r\n        )\r\n        .filter((index) => index !== -1);\r\n\r\n      // set state to unsent\r\n      queuedIndices.forEach(\r\n        (index) => (state[index].status = SendStatus.UNSENT)\r\n      );\r\n\r\n      // sendingEpic will cancel ongoing processes\r\n    },\r\n  },\r\n});\r\nexport default sendingSlice.reducer;\r\n\r\n// exported actions\r\nexport const {\r\n  setSendingState,\r\n  setMessage,\r\n  setStatus,\r\n  setError,\r\n  setShowPreview,\r\n  sendMessages,\r\n  cancelSending,\r\n} = sendingSlice.actions;\r\n\r\n// create MessageSendObject array from data in redux store\r\nexport function loadMessagesToSend(): AppThunk {\r\n  return (dispatch, getState) => {\r\n    // get data from redux store\r\n    const state: RootState = getState();\r\n    const template = selectMessageTemplate(state);\r\n    const data = selectParsedData(state);\r\n\r\n    // convert data into spam objects and templating function\r\n    const templater = makeMessageTemplater(template);\r\n    const spams = makeSpamObjectArray(data);\r\n\r\n    // create message sending objects\r\n    const messages = spams.map(templater);\r\n    const sendObjects: SendingState = messages.map((m) => {\r\n      return {\r\n        message: m,\r\n        status: SendStatus.UNSENT,\r\n        showPreview: false,\r\n      };\r\n    });\r\n\r\n    // put result into redux store\r\n    dispatch(setSendingState(sendObjects));\r\n  };\r\n}\r\n\r\n// selectors\r\nexport function selectMessageHost(state: RootState) {\r\n  return state.sending[0]?.message?.host;\r\n}\r\n\r\nexport function selectSendStatuses(state: RootState): SendStatus[] {\r\n  return state.sending.map((x) => x.status);\r\n}\r\n\r\nexport function selectSendObject(index: number) {\r\n  return function (state: RootState): MessageSendObject {\r\n    return state.sending[index];\r\n  };\r\n}\r\n\r\nexport function selectMessage(index: number) {\r\n  return function (state: RootState): Message {\r\n    return state.sending[index].message;\r\n  };\r\n}\r\n\r\n// test if a message should be sent\r\nexport function shouldSendMessage(status: SendStatus) {\r\n  return status === SendStatus.UNSENT || status === SendStatus.ERROR;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport MainPage from \"./features/MainPage\";\r\nimport DataPage from \"./features/data/DataPage\";\r\nimport MessagePage from \"./features/message/MessagePage\";\r\nimport SendPage from \"./features/sending/SendPage\";\r\nimport { setExitConfirmation } from \"./utils/misc\";\r\n\r\nenum UiState {\r\n  MAIN_PAGE,\r\n  DATA_PAGE,\r\n  MESSAGE_PAGE,\r\n  SEND_PAGE,\r\n}\r\nconst initialUiState: UiState = UiState.MAIN_PAGE;\r\n\r\n// the App itself is a simple router that returns the desired\r\n// component depending on an internal state\r\nexport default function App() {\r\n  // which component to show\r\n  const [uiState, setUiState] = useState(initialUiState);\r\n\r\n  // return the desired component\r\n  switch (uiState) {\r\n    case UiState.MAIN_PAGE:\r\n      return (\r\n        <MainPage\r\n          nextPage={() => {\r\n            // add the \"are you sure you want to leave\" notification\r\n            setExitConfirmation();\r\n            setUiState(UiState.DATA_PAGE);\r\n          }}\r\n        />\r\n      );\r\n\r\n    case UiState.DATA_PAGE:\r\n      return (\r\n        <DataPage\r\n          prevPage={() => setUiState(UiState.MAIN_PAGE)}\r\n          nextPage={() => setUiState(UiState.MESSAGE_PAGE)}\r\n        />\r\n      );\r\n\r\n    case UiState.MESSAGE_PAGE:\r\n      return (\r\n        <MessagePage\r\n          prevPage={() => setUiState(UiState.DATA_PAGE)}\r\n          nextPage={() => setUiState(UiState.SEND_PAGE)}\r\n        />\r\n      );\r\n\r\n    case UiState.SEND_PAGE:\r\n      return <SendPage prevPage={() => setUiState(UiState.MESSAGE_PAGE)} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEnvelope } from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n  faAngleDown,\r\n  faSpinner,\r\n  faCheck,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendStatus, selectSendObject, setShowPreview } from \"./sendingSlice\";\r\nimport MessagePreview from \"../message/MessagePreview\";\r\n\r\nexport default function MessageSendCard(props: { index: number }) {\r\n  // get data from redux store\r\n  const { message, status, showPreview, error } = useSelector(\r\n    selectSendObject(props.index)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // function to toggle the expanded/collapsed state\r\n  const togglePreview = () => {\r\n    dispatch(\r\n      setShowPreview({\r\n        index: props.index,\r\n        showPreview: !showPreview,\r\n      })\r\n    );\r\n  };\r\n\r\n  // list of all recipients\r\n  const recipients: string = [message.to, message.cc, message.bcc]\r\n    .filter((x) => x?.trim())\r\n    .join(\", \");\r\n\r\n  // icon\r\n  const icon = getIcon(status);\r\n  const iconStyle = getIconStyle(status);\r\n  const iconTooltip = getIconTooltip(status);\r\n  const iconSpin =\r\n    status === SendStatus.QUEUED || status === SendStatus.SENDING;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-header-title\">\r\n          {/* icon */}\r\n          <span className={`icon mr-3 ${iconStyle}`} title={iconTooltip}>\r\n            <FontAwesomeIcon icon={icon} fixedWidth pulse={iconSpin} />\r\n          </span>\r\n          {/* recipients */}\r\n          {recipients}\r\n          {!recipients && (\r\n            <span className=\"has-text-danger\">Message has no recipients!</span>\r\n          )}\r\n          {/* error in message */}\r\n          {message.errors && message.errors.length > 0 && (\r\n            <>\r\n              &nbsp;\r\n              <span className=\"tag is-warning is-light\">Message error</span>\r\n            </>\r\n          )}\r\n          {/* error in sending process */}\r\n          {status === SendStatus.ERROR && (\r\n            <>\r\n              &nbsp;\r\n              <span className=\"tag is-danger is-light\">Sending error</span>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {/* toggle expand/collapse button */}\r\n        <div className=\"card-header-icon\" onClick={togglePreview}>\r\n          <span className=\"icon\">\r\n            <FontAwesomeIcon icon={faAngleDown} fixedWidth />\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* show message preview when expanded */}\r\n      {showPreview && (\r\n        <div className=\"card-content\">\r\n          <MessagePreview\r\n            message={message}\r\n            additionalErrors={error ? [error] : []}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getIcon(status: SendStatus) {\r\n  switch (status) {\r\n    case SendStatus.UNSENT:\r\n      return faEnvelope;\r\n    case SendStatus.QUEUED:\r\n      return faSpinner;\r\n    case SendStatus.SENDING:\r\n      return faSpinner;\r\n    case SendStatus.SUCCESS:\r\n      return faCheck;\r\n    case SendStatus.ERROR:\r\n      return faTimes;\r\n  }\r\n}\r\n\r\nfunction getIconStyle(status: SendStatus) {\r\n  switch (status) {\r\n    case SendStatus.SUCCESS:\r\n      return \"has-text-success\";\r\n    case SendStatus.ERROR:\r\n      return \"has-text-danger\";\r\n    case SendStatus.SENDING:\r\n      return \"has-text-info\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n\r\nfunction getIconTooltip(status: SendStatus) {\r\n  switch (status) {\r\n    case SendStatus.UNSENT:\r\n      return \"Not yet sent\";\r\n    case SendStatus.QUEUED:\r\n      return \"Queued for sending\";\r\n    case SendStatus.SENDING:\r\n      return \"Sending in progress\";\r\n    case SendStatus.SUCCESS:\r\n      return \"Delivered\";\r\n    case SendStatus.ERROR:\r\n      return \"Error\";\r\n  }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  SendStatus,\r\n  selectMessageHost,\r\n  selectSendStatuses,\r\n  loadMessagesToSend,\r\n  setShowPreview,\r\n  sendMessages,\r\n  cancelSending,\r\n} from \"./sendingSlice\";\r\nimport MessageSendCard from \"./MessageSendCard\";\r\nimport NavBar from \"../NavBar\";\r\nimport { isMIT, clearExitConfirmation } from \"../../utils/misc\";\r\n\r\ntype SendPageProps = {\r\n  prevPage: () => void;\r\n};\r\n\r\nexport default function SendPage(props: SendPageProps) {\r\n  // data from redux store\r\n  const sendStatuses = useSelector(selectSendStatuses);\r\n  const messageHost = useSelector(selectMessageHost);\r\n  const dispatch = useDispatch();\r\n\r\n  // counts of various message types\r\n  const numMessages = sendStatuses.length;\r\n  const numSuccess = sendStatuses.filter((x) => x === SendStatus.SUCCESS)\r\n    .length;\r\n  const numUnsent = numMessages - numSuccess;\r\n  const numError = sendStatuses.filter((x) => x === SendStatus.ERROR).length;\r\n\r\n  // done sending when all messages are successfully sent\r\n  const isDoneSending = numSuccess === numMessages;\r\n  // in progress if any message is queued or sending\r\n  const isInProgress = sendStatuses.some(\r\n    (x) => x === SendStatus.QUEUED || x === SendStatus.SENDING\r\n  );\r\n  // allow going back for further edits when no or all messages have been sent\r\n  const canGoBack = !isInProgress && (numSuccess === 0 || isDoneSending);\r\n\r\n  // update messages on component mount\r\n  useEffect(() => {\r\n    dispatch(loadMessagesToSend());\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // when done, clear the page exit notification\r\n  useEffect(() => {\r\n    if (numMessages > 0 && isDoneSending) {\r\n      clearExitConfirmation();\r\n    }\r\n  }, [numMessages, isDoneSending]);\r\n\r\n  return (\r\n    <>\r\n      {/* no messages */}\r\n      {numMessages === 0 && (\r\n        <div className=\"hero is-fullheight\">\r\n          <div className=\"hero-header\">\r\n            <NavBar\r\n              title=\"Send your spam\"\r\n              prevPage={props.prevPage}\r\n              showNext={false}\r\n              showPrev={canGoBack}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"hero-body\">\r\n            <div className=\"container has-text-centered pb-6\">\r\n              <div className=\"huge-icon\">\r\n                <span role=\"img\" aria-label=\"icon\">\r\n                  📭\r\n                </span>\r\n              </div>\r\n              <p className=\"title has-text-grey-dark\">No messages to send!</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* with messages */}\r\n      {numMessages > 0 && (\r\n        <div>\r\n          <NavBar\r\n            title=\"Send your spam\"\r\n            prevPage={props.prevPage}\r\n            showNext={false}\r\n            showPrev={canGoBack}\r\n          />\r\n\r\n          <div>\r\n            <div className=\"container px-3 pb-5\">\r\n              {/* notification for fake sending when running in demo mode */}\r\n              {!isMIT && (\r\n                <div className=\"message is-warning\">\r\n                  <div className=\"message-body\">\r\n                    <strong>You are using a non-functional demo.</strong> All\r\n                    results here are simulated, and no actual emails will be\r\n                    sent.\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* warning for sending more than 250 messages through outgoing */}\r\n              {numMessages >= 250 && messageHost !== \"esp-mail.mit.edu\" && (\r\n                <div className=\"message is-danger\">\r\n                  <div className=\"message-body\">\r\n                    <strong>You are sending more than 250 emails.</strong> MIT\r\n                    emails are limited to sending 500 messages per 24 hours\r\n                    without prior permission from IS&T. Do you really need to be\r\n                    using the spam script, or can you send this using a mailing\r\n                    list, the comm panel, or bcc'ing people?\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* warning for sending more than 250 messages */}\r\n              {numMessages >= 250 && messageHost === \"esp-mail.mit.edu\" && (\r\n                <div className=\"message is-warning\">\r\n                  <div className=\"message-body\">\r\n                    <strong>You are sending more than 250 emails.</strong>{\" \"}\r\n                    Sending to large numbers of people is not well-tested.\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* progress stats and send/pause button */}\r\n              <div className=\"level pb-2\">\r\n                {/* count of messages not yet successfully sent */}\r\n                <div className=\"level-item has-text-centered\">\r\n                  <div>\r\n                    <p className=\"title is-1\">{numUnsent}</p>\r\n                    <p className=\"heading\">Not sent</p>\r\n                  </div>\r\n                </div>\r\n                {/* count of messages successfully sent */}\r\n                <div className=\"level-item has-text-centered\">\r\n                  <div>\r\n                    <p className=\"title is-1\">{numSuccess}</p>\r\n                    <p className=\"heading\">Delivered</p>\r\n                  </div>\r\n                </div>\r\n                {/* number of errors that occurred while sending */}\r\n                <div className=\"level-item has-text-centered\">\r\n                  <div>\r\n                    <p\r\n                      className={`title is-1 ${\r\n                        numError > 0 ? \"has-text-danger\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {numError}\r\n                    </p>\r\n                    <p className=\"heading\">Errors</p>\r\n                  </div>\r\n                </div>\r\n                {/* button to send/pause */}\r\n                <div className=\"level-item has-text-centered\">\r\n                  {isDoneSending && (\r\n                    <div>\r\n                      <span className=\"icon is-large has-text-success\">\r\n                        <FontAwesomeIcon icon={faCheck} size=\"3x\" />\r\n                      </span>\r\n                      <p className=\"heading pt-1\">All done!</p>\r\n                    </div>\r\n                  )}\r\n                  {isInProgress && (\r\n                    <div>\r\n                      <button\r\n                        className=\"button is-medium is-outlined is-warning\"\r\n                        onClick={() => dispatch(cancelSending())}\r\n                      >\r\n                        Pause\r\n                      </button>\r\n                      <p className=\"heading pt-1\">Click to pause</p>\r\n                    </div>\r\n                  )}\r\n                  {!isDoneSending && !isInProgress && (\r\n                    <div>\r\n                      <button\r\n                        className=\"button is-medium is-success\"\r\n                        onClick={() => dispatch(sendMessages())}\r\n                      >\r\n                        Spam!\r\n                      </button>\r\n                      <p className=\"heading pt-1\">\r\n                        {numError > 0 ? \"Click to (re)send\" : \"Click to send\"}\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* label and buttons for expanding/collapsing cards */}\r\n              <div className=\"level is-mobile mb-2\">\r\n                <div className=\"level-left\">\r\n                  <p className=\"subtitle is-5 mt-1\">{`You have ${numMessages} email message${\r\n                    numMessages > 1 ? \"s\" : \"\"\r\n                  }.`}</p>\r\n                </div>\r\n                <div className=\"level-right\">\r\n                  <div className=\"buttons has-addons\">\r\n                    <button\r\n                      className=\"button is-small\"\r\n                      onMouseDown={(e) => {\r\n                        dispatch(setShowPreview({ showPreview: true }));\r\n                        e.preventDefault();\r\n                      }}\r\n                    >\r\n                      Expand all\r\n                    </button>\r\n                    <button\r\n                      className=\"button is-small\"\r\n                      onMouseDown={(e) => {\r\n                        dispatch(setShowPreview({ showPreview: false }));\r\n                        e.preventDefault();\r\n                      }}\r\n                    >\r\n                      Collapse all\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* generate a card for each array index */}\r\n              {sendStatuses.map((message, index) => {\r\n                return <MessageSendCard key={index} index={index} />;\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Observable, of } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport { delay, tap, map } from \"rxjs/operators\";\r\nimport { Message } from \"./messageTypes\";\r\nimport { isMIT } from \"./misc\";\r\nimport {\r\n  SendStatus,\r\n  SendError,\r\n  setStatus,\r\n  setError,\r\n} from \"../features/sending/sendingSlice\";\r\n\r\n// url for the sending API\r\nconst API_URL = \"./backend/sendmail.py\";\r\n\r\n// response from the message sending API on scripts.mit.edu\r\ntype ApiResponse = {\r\n  // status should be \"success\" or \"error\"\r\n  status: string;\r\n  // optional string for an error message\r\n  message?: string;\r\n  // optional string for the command name, e.g. \"sendmail.py\"\r\n  command?: string;\r\n};\r\n\r\n// real API call for sending a single message\r\nfunction apiSendMessageReal(message: Message): Observable<ApiResponse> {\r\n  return ajax({\r\n    url: API_URL,\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: message,\r\n    withCredentials: true,\r\n  }).pipe(\r\n    // extract the response object inside the AjaxResponse\r\n    map((ajaxResponse) => {\r\n      if (!ajaxResponse.response.status) {\r\n        return {\r\n          status: \"error\",\r\n          message: \"Did not receive valid response from API\",\r\n        };\r\n      }\r\n      return ajaxResponse.response as ApiResponse;\r\n    })\r\n  );\r\n}\r\n\r\n// simulated API call for sending a single message\r\nfunction apiSendMessageFake(message: Message): Observable<ApiResponse> {\r\n  const isError = Math.random() < 0.5;\r\n  const delayTime = 1000;\r\n  const recipients: string = [message.to, message.cc, message.bcc]\r\n    .filter((x) => x?.trim())\r\n    .join(\", \");\r\n\r\n  return of({\r\n    status: isError ? \"error\" : \"success\",\r\n    message: isError\r\n      ? \"This is a fake error that occurs with 50% probability\"\r\n      : \"\",\r\n  }).pipe(\r\n    delay(delayTime),\r\n    tap(() => {\r\n      if (isError) {\r\n        console.log(`Fake API: encountered a fake error`);\r\n      } else {\r\n        console.log(`Fake API: sent message to ${recipients}`);\r\n      }\r\n    })\r\n  );\r\n}\r\n\r\n// API call for sending a single message\r\nexport function apiSendMessage(message: Message): Observable<ApiResponse> {\r\n  if (isMIT) {\r\n    return apiSendMessageReal(message);\r\n  } else {\r\n    return apiSendMessageFake(message);\r\n  }\r\n}\r\n\r\n// convert the API response to the appropriate redux action\r\nexport function apiHandleResponse(index: number, response: ApiResponse) {\r\n  if (response.status === \"success\") {\r\n    // message has been sent successfully\r\n    return setStatus({\r\n      index: index,\r\n      status: SendStatus.SUCCESS,\r\n    });\r\n  } else {\r\n    // server encountered an error while sending the message\r\n    const errorMessage = response.message || response.status;\r\n    return setError({\r\n      index: index,\r\n      error: {\r\n        name: `Server responded with ${response.status}`,\r\n        message: errorMessage,\r\n      } as SendError,\r\n    });\r\n  }\r\n}\r\n","import { Epic } from \"redux-observable\";\r\nimport { of, from, concat } from \"rxjs\";\r\nimport {\r\n  map,\r\n  filter,\r\n  withLatestFrom,\r\n  concatMap,\r\n  takeUntil,\r\n  catchError,\r\n} from \"rxjs/operators\";\r\nimport {\r\n  SendStatus,\r\n  SendError,\r\n  selectSendStatuses,\r\n  selectMessage,\r\n  setStatus,\r\n  setError,\r\n  sendMessages,\r\n  cancelSending,\r\n} from \"./sendingSlice\";\r\nimport { apiSendMessage, apiHandleResponse } from \"../../utils/api\";\r\n\r\n/*\r\nDOCUMENTATION FOR MESSAGE SENDING ACTIONS\r\nsendMessages action:\r\n  redux reducer:\r\n    filter unsent/error messages\r\n    set status to queued\r\n  rxjs epic:\r\n    create indices of messages to be sent\r\n    map over message indices\r\n      set status to sending\r\n      do the API call to send messsage\r\n\r\ncancelSending action:\r\n  redux reducer:\r\n    filter queued/sending messages\r\n    set status to unsent\r\n  rxjs epic:\r\n    stop the stream\r\n*/\r\n\r\nexport const sendingEpic: Epic = (action$, state$) =>\r\n  action$.pipe(\r\n    // only listen to actions of type sendMessages\r\n    filter(sendMessages.match),\r\n\r\n    // loop over each sendMessages action\r\n    withLatestFrom(state$),\r\n    concatMap(([action, state]) =>\r\n      // create observable of message indices to be sent\r\n      from(\r\n        // create array of message indices to be sent\r\n        selectSendStatuses(state)\r\n          .map((status, index) => (status === SendStatus.QUEUED ? index : -1))\r\n          .filter((index) => index !== -1)\r\n      ).pipe(\r\n        // loop over each index\r\n        withLatestFrom(state$),\r\n        concatMap(([index, state]) =>\r\n          concat(\r\n            // notify that the message is sending\r\n            of(\r\n              setStatus({\r\n                index: index,\r\n                status: SendStatus.SENDING,\r\n              })\r\n            ),\r\n\r\n            // do the api call\r\n            apiSendMessage(selectMessage(index)(state)).pipe(\r\n              // convert the api response into the desired response action\r\n              map((response) => apiHandleResponse(index, response)),\r\n\r\n              // if there's an ajax error,\r\n              // emit an observable containing the error handling action\r\n              catchError((error: Error) =>\r\n                of(\r\n                  setError({\r\n                    index: index,\r\n                    error: {\r\n                      name: error.name,\r\n                      message: error.message,\r\n                    } as SendError,\r\n                  })\r\n                )\r\n              )\r\n            )\r\n          )\r\n        ),\r\n\r\n        // quit upon receiving a cancellation action\r\n        takeUntil(action$.pipe(filter(cancelSending.match)))\r\n      )\r\n    )\r\n  );\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport { Epic, createEpicMiddleware, combineEpics } from \"redux-observable\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport dataReducer from \"./features/data/dataSlice\";\r\nimport templateReducer from \"./features/message/messageSlice\";\r\nimport sendingReducer from \"./features/sending/sendingSlice\";\r\nimport { sendingEpic } from \"./features/sending/sendingEpic\";\r\n\r\n// list of all redux-observable epics\r\nconst epics: Epic[] = [sendingEpic];\r\n\r\n// create redux-observable epicMiddleware and root epic\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst rootEpic: Epic = (action$, store$, dependencies) =>\r\n  combineEpics(...epics)(action$, store$, dependencies).pipe(\r\n    catchError((error, source) => {\r\n      console.error(error);\r\n      return source;\r\n    })\r\n  );\r\n\r\n// create the redux store, add epic middleware, and run the rootEpic\r\nfunction createStoreWithEpicMiddleware() {\r\n  const store = configureStore({\r\n    // root reducer will be the combination of these functions\r\n    reducer: {\r\n      data: dataReducer, // the array of data\r\n      template: templateReducer, // the message template\r\n      sending: sendingReducer, // per-message sending status\r\n    },\r\n\r\n    // add redux-observable epicMiddleware to default middleware\r\n    middleware: (getDefaultMiddleware) =>\r\n      getDefaultMiddleware().prepend(epicMiddleware),\r\n  });\r\n\r\n  epicMiddleware.run(rootEpic);\r\n  return store;\r\n}\r\nexport const store = createStoreWithEpicMiddleware();\r\n\r\n// exported types\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport { store } from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n//import * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}